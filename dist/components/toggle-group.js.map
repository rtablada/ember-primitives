{"version":3,"file":"toggle-group.js","sources":["../../src/components/toggle-group.gts"],"sourcesContent":["import { template } from \"@ember/template-compiler\";\nimport Component from '@glimmer/component';\nimport { cached } from '@glimmer/tracking';\nimport { hash } from '@ember/helper';\nimport { getTabsterAttribute, Types } from 'tabster';\nimport { TrackedSet } from 'tracked-built-ins';\n// The consumer will need to provide types for tracked-toolbox.\n// Or.. better yet, we PR to trakcked-toolbox to provide them\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { localCopy } from 'tracked-toolbox';\nimport { Toggle } from './toggle.gts';\nimport type { ComponentLike } from '@glint/template';\nconst TABSTER_CONFIG = getTabsterAttribute({\n    mover: {\n        direction: Types.MoverDirections.Both,\n        cyclic: true\n    }\n}, true);\nexport interface ItemSignature<Value = any> {\n    /**\n   * The button element will have aria-pressed=\"true\" on it when the button is in the pressed state.\n   */ Element: HTMLButtonElement;\n    Args: {\n        /**\n     * When used in a group of Toggles, this option will be helpful to\n     * know which toggle was pressed if you're using the same @onChange\n     * handler for multiple toggles.\n     */ value?: Value;\n    };\n    Blocks: {\n        default: [/**\n       * the current pressed state of the toggle button\n       *\n       * Useful when using the toggle button as an uncontrolled component\n       */ pressed: boolean];\n    };\n}\nexport type Item<Value = any> = ComponentLike<ItemSignature<Value>>;\nexport interface SingleSignature<Value> {\n    Element: HTMLDivElement;\n    Args: {\n        /**\n     * Optionally set the initial toggle state\n     */ value?: Value;\n        /**\n     * Callback for when the toggle-group's state is changed.\n     *\n     * Can be used to control the state of the component.\n     *\n     *\n     * When none of the toggles are selected, undefined will be passed.\n     */ onChange?: (value: Value | undefined) => void;\n    };\n    Blocks: {\n        default: [{\n                /**\n         * The Toggle Switch\n         */ Item: Item;\n            }];\n    };\n}\nexport interface MultiSignature<Value = any> {\n    Element: HTMLDivElement;\n    Args: {\n        /**\n     * Optionally set the initial toggle state\n     */ value?: Value[] | Set<Value> | Value;\n        /**\n     * Callback for when the toggle-group's state is changed.\n     *\n     * Can be used to control the state of the component.\n     *\n     *\n     * When none of the toggles are selected, undefined will be passed.\n     */ onChange?: (value: Set<Value>) => void;\n    };\n    Blocks: {\n        default: [{\n                /**\n         * The Toggle Switch\n         */ Item: Item;\n            }];\n    };\n}\ninterface PrivateSingleSignature<Value = any> {\n    Element: HTMLDivElement;\n    Args: {\n        type?: 'single';\n        /**\n     * Optionally set the initial toggle state\n     */ value?: Value;\n        /**\n     * Callback for when the toggle-group's state is changed.\n     *\n     * Can be used to control the state of the component.\n     *\n     *\n     * When none of the toggles are selected, undefined will be passed.\n     */ onChange?: (value: Value | undefined) => void;\n    };\n    Blocks: {\n        default: [{\n                Item: Item;\n            }];\n    };\n}\ninterface PrivateMultiSignature<Value = any> {\n    Element: HTMLDivElement;\n    Args: {\n        type: 'multi';\n        /**\n     * Optionally set the initial toggle state\n     */ value?: Value[] | Set<Value> | Value;\n        /**\n     * Callback for when the toggle-group's state is changed.\n     *\n     * Can be used to control the state of the component.\n     *\n     *\n     * When none of the toggles are selected, undefined will be passed.\n     */ onChange?: (value: Set<Value>) => void;\n    };\n    Blocks: {\n        default: [{\n                Item: Item;\n            }];\n    };\n}\nfunction isMulti(x1: 'single' | 'multi' | undefined): x is 'multi' {\n    return x1 === 'multi';\n}\nexport class ToggleGroup<Value = any> extends Component<PrivateSingleSignature<Value> | PrivateMultiSignature<Value>> {\n    // See: https://github.com/typed-ember/glint/issues/715\n    static{\n        template(`\n    {{#if (isMulti this.args.type)}}\n      <MultiToggleGroup\n        @value={{this.args.value}}\n        @onChange={{this.args.onChange}}\n        ...attributes\n        as |x|\n      >\n        {{yield x}}\n      </MultiToggleGroup>\n    {{else}}\n      <SingleToggleGroup\n        @value={{this.args.value}}\n        @onChange={{this.args.onChange}}\n        ...attributes\n        as |x|\n      >\n        {{yield x}}\n      </SingleToggleGroup>\n    {{/if}}\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n}\nlet SingleToggleGroup = class SingleToggleGroup<Value = any> extends Component<SingleSignature<Value>> {\n    @localCopy('args.value')\n    activePressed?: Value;\n    handleToggle = (value1: Value)=>{\n        if (this.activePressed === value1) {\n            this.activePressed = undefined;\n            return;\n        }\n        this.activePressed = value1;\n        this.args.onChange?.(this.activePressed);\n    };\n    isPressed = (value1: Value | undefined)=>value1 === this.activePressed;\n    static{\n        template(`\n    <div data-tabster={{TABSTER_CONFIG}} ...attributes>\n      {{yield (hash Item=(component Toggle onChange=this.handleToggle isPressed=this.isPressed))}}\n    </div>\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n};\nlet MultiToggleGroup = class MultiToggleGroup<Value = any> extends Component<MultiSignature<Value>> {\n    /**\n   * Normalizes @value to a Set\n   * and makes sure that even if the input Set is reactive,\n   * we don't mistakenly dirty it.\n   */ @cached\n    get activePressed(): TrackedSet<Value> {\n        let value1 = this.args.value;\n        if (!value1) {\n            return new TrackedSet();\n        }\n        if (Array.isArray(value1)) {\n            return new TrackedSet(value1);\n        }\n        if (value1 instanceof Set) {\n            return new TrackedSet(value1);\n        }\n        return new TrackedSet([\n            value1\n        ]);\n    }\n    handleToggle = (value1: Value)=>{\n        if (this.activePressed.has(value1)) {\n            this.activePressed.delete(value1);\n        } else {\n            this.activePressed.add(value1);\n        }\n        this.args.onChange?.(new Set<Value>(this.activePressed.values()));\n    };\n    isPressed = (value1: Value)=>this.activePressed.has(value1);\n    static{\n        template(`\n    <div data-tabster={{TABSTER_CONFIG}} ...attributes>\n      {{yield (hash Item=(component Toggle onChange=this.handleToggle isPressed=this.isPressed))}}\n    </div>\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n};\n//# sourceMappingURL=data:application/json;base64,"],"names":["TABSTER_CONFIG","getTabsterAttribute","mover","direction","Types","MoverDirections","Both","cyclic","isMulti","x1","ToggleGroup","Component","setComponentTemplate","precompileTemplate","scope","MultiToggleGroup","SingleToggleGroup","strictMode","g","this","prototype","localCopy","i","void 0","handleToggle","value1","activePressed","undefined","args","onChange","isPressed","hash","Toggle","value","TrackedSet","Array","isArray","Set","n","cached","has","delete","add","values"],"mappings":";;;;;;;;;;;AAgBA,MAAMA,cAAA,GAAiBC,mBAAA,CACrB;AACEC,EAAAA,KAAA,EAAO;AACLC,IAAAA,SAAA,EAAWC,KAAA,CAAMC,eAAe,CAACC,IAAI;AACrCC,IAAAA,MAAA,EAAQ,IAAA;AACV,GAAA;AACF,CACA,EAAA,IAAA,CAAA,CAAA;AA+IF,SAASC,OAAAA,CAAQC,EAAiC,EAAQ;AACxD,EAAA,OAAOA,EAAA,KAAM,OAAA,CAAA;AACf,CAAA;AAEO,MAAMC,WAAA,SAAiCC,SAAA,CACU;AAEtD;AACA,EAAA;IAAAC,oBAAA,CAAAC,kBAAA,CAoBA,+XAAA,EAAA;AAAAC,MAAAA,KAAA,EAAAA,OAAA;QAAAN,OAAA;QAAAO,gBAAA;AAAAC,QAAAA,iBAAAA;AAAA,OAAA,CAAA;MAAAC,UAAA,EAAA,IAAA;AAAU,KAAA,CAAA,EAAV,IAAW,CAAA,CAAA;AAAD,GAAA;AACZ,CAAA;AAEA,IAAAD,iBAAM,GAAN,MAAMA,iBAAA,SAAuCL,SAAA,CAA0B;AAAA,EAAA;AAAAO,IAAAA,CAAA,CAAAC,IAAA,CAAAC,SAAA,EAAA,eAAA,EAAA,CACpEC,SAAA,CAAU,YAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,cAAA,IAAAC,CAAA,CAAAH,IAAA,oBAAAI,KAAA,CAAA,EAAA;AAEXC,EAAAA,YAAA,GAAgBC,MAAO,IAAA;AACrB,IAAA,IAAI,IAAI,CAACC,aAAa,KAAKD,MAAA,EAAO;MAChC,IAAI,CAACC,aAAa,GAAGC,SAAA,CAAA;AAErB,MAAA,OAAA;AACF,KAAA;IAEA,IAAI,CAACD,aAAa,GAAGD,MAAA,CAAA;AAErB,IAAA,IAAI,CAACG,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACH,aAAa,CAAA,CAAA;AACzC,GAAA,CAAA;AAEAI,EAAAA,SAAA,GAAaL,MAAwB,IAAKA,MAAA,KAAU,IAAI,CAACC,aAAa,CAAA;AAEtE,EAAA;IAAAd,oBAAA,CAAAC,kBAAA,CAIA,+KAAA,EAAA;AAAAC,MAAAA,KAAA,EAAAA,OAAA;QAAAd,cAAA;QAAA+B,IAAA;AAAAC,QAAAA,MAAAA;AAAA,OAAA,CAAA;MAAAf,UAAA,EAAA,IAAA;AAAU,KAAA,CAAA,EAAV,IAAW,CAAA,CAAA;AAAD,GAAA;AACZ,CAAA,CAAA;AAEA,IAAAF,gBAAM,GAAN,MAAMA,gBAAA,SAAsCJ,SAAA,CAAyB;AACnE;;;;;AAKA,EAAA,IACIe,gBAAmC;AACrC,IAAA,IAAID,MAAA,GAAQ,IAAI,CAACG,IAAI,CAACK,KAAK,CAAA;IAE3B,IAAI,CAACR,MAAA,EAAO;AACV,MAAA,OAAO,IAAIS,UAAA,EAAA,CAAA;AACb,KAAA;AAEA,IAAA,IAAIC,KAAA,CAAMC,OAAO,CAACX,MAAA,CAAQ,EAAA;MACxB,OAAO,IAAIS,UAAA,CAAWT,MAAA,CAAA,CAAA;AACxB,KAAA;IAEA,IAAIA,MAAA,YAAiBY,GAAA,EAAK;MACxB,OAAO,IAAIH,UAAA,CAAWT,MAAA,CAAA,CAAA;AACxB,KAAA;AAEA,IAAA,OAAO,IAAIS,UAAA,CAAW,CAACT,MAAA,CAAM,CAAA,CAAA;AAC/B,GAAA;AAAA,EAAA;AAAAa,IAAAA,CAAA,CAAAnB,IAAA,CAAAC,SAAA,oBAjBCmB,MAAA,CAAA,CAAA,CAAA;AAAA,GAAA;AAmBDf,EAAAA,YAAA,GAAgBC,MAAO,IAAA;AACrB,IAAA,IAAI,IAAI,CAACC,aAAa,CAACc,GAAG,CAACf,MAAA,CAAQ,EAAA;AACjC,MAAA,IAAI,CAACC,aAAa,CAACe,MAAM,CAAChB,MAAA,CAAA,CAAA;KACrB,MAAA;AACL,MAAA,IAAI,CAACC,aAAa,CAACgB,GAAG,CAACjB,MAAA,CAAA,CAAA;AACzB,KAAA;AAEA,IAAA,IAAI,CAACG,IAAI,CAACC,QAAQ,GAAG,IAAIQ,GAAA,CAAW,IAAI,CAACX,aAAa,CAACiB,MAAM,EAAA,CAAA,CAAA,CAAA;AAC/D,GAAA,CAAA;EAEAb,SAAA,GAAaL,MAAO,IAAU,IAAI,CAACC,aAAa,CAACc,GAAG,CAACf,MAAA,CAAA,CAAA;AAErD,EAAA;IAAAb,oBAAA,CAAAC,kBAAA,CAIA,+KAAA,EAAA;AAAAC,MAAAA,KAAA,EAAAA,OAAA;QAAAd,cAAA;QAAA+B,IAAA;AAAAC,QAAAA,MAAAA;AAAA,OAAA,CAAA;MAAAf,UAAA,EAAA,IAAA;AAAU,KAAA,CAAA,EAAV,IAAW,CAAA,CAAA;AAAD,GAAA;AACZ,CAAA;;;;"}