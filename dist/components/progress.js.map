{"version":3,"file":"progress.js","sources":["../../src/components/progress.gts"],"sourcesContent":["import { template } from \"@ember/template-compiler\";\nimport Component from '@glimmer/component';\nimport { hash } from '@ember/helper';\nimport type { TOC } from '@ember/component/template-only';\nimport type { WithBoundArgs } from '@glint/template';\nexport interface Signature {\n    Element: HTMLDivElement;\n    Args: {\n        /**\n     * The current progress\n     * This may be less than 0 or more than `max`,\n     * but the resolved value (managed internally, and yielded out)\n     * does not exceed the range [0, max]\n     */ value: number;\n        /**\n     * The max value, defaults to 100\n     */ max?: number;\n    };\n    Blocks: {\n        default: [{\n                /**\n         * The indicator element with some state applied.\n         * This can be used to style the progress of bar.\n         */ Indicator: WithBoundArgs<typeof Indicator, 'value' | 'max' | 'percent'>;\n                /**\n         * The value as a percent of how far along the indicator should be\n         * positioned, between 0 and 100.\n         * Will be rounded to two decimal places.\n         */ percent: number;\n                /**\n         * The value as a percent of how far along the indicator should be positioned,\n         * between 0 and 1\n         */ decimal: number;\n                /**\n         * The resolved value within the limits of the progress bar.\n         */ value: number;\n            }];\n    };\n}\ntype ProgressState = 'indeterminate' | 'complete' | 'loading';\nconst DEFAULT_MAX = 100;\n/**\n * Non-negative, non-NaN, non-Infinite, positive, rational\n */ function isValidProgressNumber(value1: number | undefined | null): value is number {\n    if (typeof value1 !== 'number') return false;\n    if (!Number.isFinite(value1)) return false;\n    return value1 >= 0;\n}\nfunction progressState(value1: number | undefined | null, maxValue1: number): ProgressState {\n    return value1 == null ? 'indeterminate' : value1 === maxValue1 ? 'complete' : 'loading';\n}\nfunction getMax(userMax1: number | undefined | null): number {\n    return isValidProgressNumber(userMax1) ? userMax1 : DEFAULT_MAX;\n}\nfunction getValue(userValue1: number | undefined | null, maxValue1: number): number {\n    let max1 = getMax(maxValue1);\n    if (!isValidProgressNumber(userValue1)) {\n        return 0;\n    }\n    if (userValue1 > max1) {\n        return max1;\n    }\n    return userValue1;\n}\nfunction getValueLabel(value1: number, max1: number) {\n    return `${Math.round((value1 / max1) * 100)}%`;\n}\nconst Indicator: TOC<{\n    Element: HTMLDivElement;\n    Args: {\n        max: number;\n        value: number;\n        percent: number;\n    };\n    Blocks: {\n        default: [];\n    };\n}> = template(`\n  <div\n    ...attributes\n    data-max={{@max}}\n    data-value={{@value}}\n    data-state={{progressState @value @max}}\n    data-percent={{@percent}}\n  >\n    {{yield}}\n  </div>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nexport class Progress extends Component<Signature> {\n    get max() {\n        return getMax(this.args.max);\n    }\n    get value() {\n        return getValue(this.args.value, this.max);\n    }\n    get valueLabel() {\n        return getValueLabel(this.value, this.max);\n    }\n    get decimal() {\n        return this.value / this.max;\n    }\n    get percent() {\n        return Math.round(this.decimal * 100 * 100) / 100;\n    }\n    static{\n        template(`\n    <div\n      ...attributes\n      aria-valuemax={{this.max}}\n      aria-valuemin=\"0\"\n      aria-valuenow={{this.value}}\n      aria-valuetext={{this.valueLabel}}\n      role=\"progressbar\"\n      data-value={{this.value}}\n      data-state={{progressState this.value this.max}}\n      data-max={{this.max}}\n      data-min=\"0\"\n      data-percent={{this.percent}}\n    >\n\n      {{yield\n        (hash\n          Indicator=(component Indicator value=this.value max=this.max percent=this.percent)\n          value=this.value\n          percent=this.percent\n          decimal=this.decimal\n        )\n      }}\n    </div>\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n}\nexport default Progress;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2VtYmVyLXByaW1pdGl2ZXMvZW1iZXItcHJpbWl0aXZlcy9lbWJlci1wcmltaXRpdmVzL3NyYy9jb21wb25lbnRzL3Byb2dyZXNzLmd0cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29tcG9uZW50IGZyb20gJ0BnbGltbWVyL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBoYXNoIH0gZnJvbSAnQGVtYmVyL2hlbHBlcic7XG5cbmltcG9ydCB0eXBlIHsgVE9DIH0gZnJvbSAnQGVtYmVyL2NvbXBvbmVudC90ZW1wbGF0ZS1vbmx5JztcbmltcG9ydCB0eXBlIHsgV2l0aEJvdW5kQXJncyB9IGZyb20gJ0BnbGludC90ZW1wbGF0ZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbmF0dXJlIHtcbiAgRWxlbWVudDogSFRNTERpdkVsZW1lbnQ7XG4gIEFyZ3M6IHtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBwcm9ncmVzc1xuICAgICAqIFRoaXMgbWF5IGJlIGxlc3MgdGhhbiAwIG9yIG1vcmUgdGhhbiBgbWF4YCxcbiAgICAgKiBidXQgdGhlIHJlc29sdmVkIHZhbHVlIChtYW5hZ2VkIGludGVybmFsbHksIGFuZCB5aWVsZGVkIG91dClcbiAgICAgKiBkb2VzIG5vdCBleGNlZWQgdGhlIHJhbmdlIFswLCBtYXhdXG4gICAgICovXG4gICAgdmFsdWU6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgbWF4IHZhbHVlLCBkZWZhdWx0cyB0byAxMDBcbiAgICAgKi9cbiAgICBtYXg_OiBudW1iZXI7XG4gIH07XG4gIEJsb2Nrczoge1xuICAgIGRlZmF1bHQ6IFtcbiAgICAgIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpbmRpY2F0b3IgZWxlbWVudCB3aXRoIHNvbWUgc3RhdGUgYXBwbGllZC5cbiAgICAgICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBzdHlsZSB0aGUgcHJvZ3Jlc3Mgb2YgYmFyLlxuICAgICAgICAgKi9cbiAgICAgICAgSW5kaWNhdG9yOiBXaXRoQm91bmRBcmdzPHR5cGVvZiBJbmRpY2F0b3IsICd2YWx1ZScgfCAnbWF4JyB8ICdwZXJjZW50Jz47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdmFsdWUgYXMgYSBwZXJjZW50IG9mIGhvdyBmYXIgYWxvbmcgdGhlIGluZGljYXRvciBzaG91bGQgYmVcbiAgICAgICAgICogcG9zaXRpb25lZCwgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAgICAgICAqIFdpbGwgYmUgcm91bmRlZCB0byB0d28gZGVjaW1hbCBwbGFjZXMuXG4gICAgICAgICAqL1xuICAgICAgICBwZXJjZW50OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdmFsdWUgYXMgYSBwZXJjZW50IG9mIGhvdyBmYXIgYWxvbmcgdGhlIGluZGljYXRvciBzaG91bGQgYmUgcG9zaXRpb25lZCxcbiAgICAgICAgICogYmV0d2VlbiAwIGFuZCAxXG4gICAgICAgICAqL1xuICAgICAgICBkZWNpbWFsOiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmVzb2x2ZWQgdmFsdWUgd2l0aGluIHRoZSBsaW1pdHMgb2YgdGhlIHByb2dyZXNzIGJhci5cbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlOiBudW1iZXI7XG4gICAgICB9LFxuICAgIF07XG4gIH07XG59XG5cbnR5cGUgUHJvZ3Jlc3NTdGF0ZSA9ICdpbmRldGVybWluYXRlJyB8ICdjb21wbGV0ZScgfCAnbG9hZGluZyc7XG5cbmNvbnN0IERFRkFVTFRfTUFYID0gMTAwO1xuXG4vKipcbiAqIE5vbi1uZWdhdGl2ZSwgbm9uLU5hTiwgbm9uLUluZmluaXRlLCBwb3NpdGl2ZSwgcmF0aW9uYWxcbiAqL1xuZnVuY3Rpb24gaXNWYWxpZFByb2dyZXNzTnVtYmVyKHZhbHVlOiBudW1iZXIgfCB1bmRlZmluZWQgfCBudWxsKTogdmFsdWUgaXMgbnVtYmVyIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFOdW1iZXIuaXNGaW5pdGUodmFsdWUpKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHZhbHVlID49IDA7XG59XG5cbmZ1bmN0aW9uIHByb2dyZXNzU3RhdGUodmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZCB8IG51bGwsIG1heFZhbHVlOiBudW1iZXIpOiBQcm9ncmVzc1N0YXRlIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnaW5kZXRlcm1pbmF0ZScgOiB2YWx1ZSA9PT0gbWF4VmFsdWUgPyAnY29tcGxldGUnIDogJ2xvYWRpbmcnO1xufVxuXG5mdW5jdGlvbiBnZXRNYXgodXNlck1heDogbnVtYmVyIHwgdW5kZWZpbmVkIHwgbnVsbCk6IG51bWJlciB7XG4gIHJldHVybiBpc1ZhbGlkUHJvZ3Jlc3NOdW1iZXIodXNlck1heCkgPyB1c2VyTWF4IDogREVGQVVMVF9NQVg7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKHVzZXJWYWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkIHwgbnVsbCwgbWF4VmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gIGxldCBtYXggPSBnZXRNYXgobWF4VmFsdWUpO1xuXG4gIGlmICghaXNWYWxpZFByb2dyZXNzTnVtYmVyKHVzZXJWYWx1ZSkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmICh1c2VyVmFsdWUgPiBtYXgpIHtcbiAgICByZXR1cm4gbWF4O1xuICB9XG5cbiAgcmV0dXJuIHVzZXJWYWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWVMYWJlbCh2YWx1ZTogbnVtYmVyLCBtYXg6IG51bWJlcikge1xuICByZXR1cm4gYCR7TWF0aC5yb3VuZCgodmFsdWUgLyBtYXgpICogMTAwKX0lYDtcbn1cblxuY29uc3QgSW5kaWNhdG9yOiBUT0M8e1xuICBFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcbiAgQXJnczogeyBtYXg6IG51bWJlcjsgdmFsdWU6IG51bWJlcjsgcGVyY2VudDogbnVtYmVyIH07XG4gIEJsb2NrczogeyBkZWZhdWx0OiBbXSB9O1xufT4gPSA8dGVtcGxhdGU-XG4gIDxkaXZcbiAgICAuLi5hdHRyaWJ1dGVzXG4gICAgZGF0YS1tYXg9e3tAbWF4fX1cbiAgICBkYXRhLXZhbHVlPXt7QHZhbHVlfX1cbiAgICBkYXRhLXN0YXRlPXt7cHJvZ3Jlc3NTdGF0ZSBAdmFsdWUgQG1heH19XG4gICAgZGF0YS1wZXJjZW50PXt7QHBlcmNlbnR9fVxuICA-XG4gICAge3t5aWVsZH19XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT47XG5cbmV4cG9ydCBjbGFzcyBQcm9ncmVzcyBleHRlbmRzIENvbXBvbmVudDxTaWduYXR1cmU-IHtcbiAgZ2V0IG1heCgpIHtcbiAgICByZXR1cm4gZ2V0TWF4KHRoaXMuYXJncy5tYXgpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiBnZXRWYWx1ZSh0aGlzLmFyZ3MudmFsdWUsIHRoaXMubWF4KTtcbiAgfVxuXG4gIGdldCB2YWx1ZUxhYmVsKCkge1xuICAgIHJldHVybiBnZXRWYWx1ZUxhYmVsKHRoaXMudmFsdWUsIHRoaXMubWF4KTtcbiAgfVxuXG4gIGdldCBkZWNpbWFsKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlIC8gdGhpcy5tYXg7XG4gIH1cblxuICBnZXQgcGVyY2VudCgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLmRlY2ltYWwgKiAxMDAgKiAxMDApIC8gMTAwO1xuICB9XG5cbiAgPHRlbXBsYXRlPlxuICAgIDxkaXZcbiAgICAgIC4uLmF0dHJpYnV0ZXNcbiAgICAgIGFyaWEtdmFsdWVtYXg9e3t0aGlzLm1heH19XG4gICAgICBhcmlhLXZhbHVlbWluPVwiMFwiXG4gICAgICBhcmlhLXZhbHVlbm93PXt7dGhpcy52YWx1ZX19XG4gICAgICBhcmlhLXZhbHVldGV4dD17e3RoaXMudmFsdWVMYWJlbH19XG4gICAgICByb2xlPVwicHJvZ3Jlc3NiYXJcIlxuICAgICAgZGF0YS12YWx1ZT17e3RoaXMudmFsdWV9fVxuICAgICAgZGF0YS1zdGF0ZT17e3Byb2dyZXNzU3RhdGUgdGhpcy52YWx1ZSB0aGlzLm1heH19XG4gICAgICBkYXRhLW1heD17e3RoaXMubWF4fX1cbiAgICAgIGRhdGEtbWluPVwiMFwiXG4gICAgICBkYXRhLXBlcmNlbnQ9e3t0aGlzLnBlcmNlbnR9fVxuICAgID5cblxuICAgICAge3t5aWVsZFxuICAgICAgICAoaGFzaFxuICAgICAgICAgIEluZGljYXRvcj0oY29tcG9uZW50IEluZGljYXRvciB2YWx1ZT10aGlzLnZhbHVlIG1heD10aGlzLm1heCBwZXJjZW50PXRoaXMucGVyY2VudClcbiAgICAgICAgICB2YWx1ZT10aGlzLnZhbHVlXG4gICAgICAgICAgcGVyY2VudD10aGlzLnBlcmNlbnRcbiAgICAgICAgICBkZWNpbWFsPXRoaXMuZGVjaW1hbFxuICAgICAgICApXG4gICAgICB9fVxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPlxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzcztcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxlQUFlLHFCQUFxQjtBQUMzQyxTQUFTLElBQUksUUFBUSxnQkFBZ0I7QUFFckMsY0FBYyxHQUFHLFFBQVEsaUNBQWlDO0FBQzFELGNBQWMsYUFBYSxRQUFRLGtCQUFrQjtBQUVyRCxpQkFBaUI7SUFDZixTQUFTO0lBQ1Q7UUFDRTs7Ozs7S0FLQyxHQUNELE9BQU8sTUFBTTtRQUNiOztLQUVDLEdBQ0QsTUFBTSxNQUFNOztJQUVkO1FBQ0U7Z0JBRUk7OztTQUdDLEdBQ0QsV0FBVyxxQkFBcUIsV0FBVyxVQUFVLFFBQVE7Z0JBQzdEOzs7O1NBSUMsR0FDRCxTQUFTLE1BQU07Z0JBQ2Y7OztTQUdDLEdBQ0QsU0FBUyxNQUFNO2dCQUNmOztTQUVDLEdBQ0QsT0FBTyxNQUFNOzs7O0tBTWhCLGdCQUFnQixrQkFBa0IsYUFBYTtBQUVwRCxNQUFNLGNBQWM7QUFFcEI7O0NBRUMsR0FDRCxTQUFTLHNCQUFzQixRQUFPLE1BQU0sR0FBRyxTQUFTLEdBQUcsSUFBSSxHQUFHLFNBQVMsTUFBTTtJQUMvRSxJQUFJLE9BQU8sV0FBVSxVQUFVLE9BQU87SUFDdEMsSUFBSSxDQUFDLE9BQU8sUUFBUSxDQUFDLFNBQVEsT0FBTztJQUVwQyxPQUFPLFVBQVM7QUFDbEI7QUFFQSxTQUFTLGNBQWMsUUFBTyxNQUFNLEdBQUcsU0FBUyxHQUFHLElBQUksRUFBRSxXQUFVLE1BQU0sR0FBRztJQUMxRSxPQUFPLFVBQVMsT0FBTyxrQkFBa0IsV0FBVSxZQUFXLGFBQWE7QUFDN0U7QUFFQSxTQUFTLE9BQU8sVUFBUyxNQUFNLEdBQUcsU0FBUyxHQUFHLElBQUksR0FBRyxNQUFNO0lBQ3pELE9BQU8sc0JBQXNCLFlBQVcsV0FBVTtBQUNwRDtBQUVBLFNBQVMsU0FBUyxZQUFXLE1BQU0sR0FBRyxTQUFTLEdBQUcsSUFBSSxFQUFFLFdBQVUsTUFBTSxHQUFHLE1BQU07SUFDL0UsSUFBSSxPQUFNLE9BQU87SUFFakIsSUFBSSxDQUFDLHNCQUFzQixhQUFZO1FBQ3JDLE9BQU87SUFDVDtJQUVBLElBQUksYUFBWSxNQUFLO1FBQ25CLE9BQU87SUFDVDtJQUVBLE9BQU87QUFDVDtBQUVBLFNBQVMsY0FBYyxRQUFPLE1BQU0sRUFBRSxNQUFLLE1BQU07SUFDL0MsT0FBTyxDQUFDLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQyxTQUFRLElBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQztBQUM5QztBQUVBLE1BQU0sV0FBVztJQUNmLFNBQVM7SUFDVDtRQUFRLEtBQUssTUFBTTtRQUFFLE9BQU8sTUFBTTtRQUFFLFNBQVMsTUFBTTs7SUFDbkQ7UUFBVTs7S0FDUCxTQUFVLENBQUE7Ozs7Ozs7Ozs7QUFVZixDQUFBLEVBQUE7SUFBQTtRQUFBLE9BQUEsS0FBQSxTQUFBLENBQUEsRUFBVztJQUFEO0FBQUE7QUFFVixPQUFPLE1BQU0saUJBQWlCLFVBQVU7SUFDdEMsSUFBSSxNQUFNO1FBQ1IsT0FBTyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztJQUM3QjtJQUVBLElBQUksUUFBUTtRQUNWLE9BQU8sU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRztJQUMzQztJQUVBLElBQUksYUFBYTtRQUNmLE9BQU8sY0FBYyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHO0lBQzNDO0lBRUEsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHO0lBQzlCO0lBRUEsSUFBSSxVQUFVO1FBQ1osT0FBTyxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sT0FBTztJQUNoRDtJQUVBLE1BQUE7UUFBQSxTQUFVLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXdCVixDQUFBLEVBQUE7WUFBQSxXQUFBLElBQVc7WUFBWDtnQkFBQSxPQUFBLEtBQUEsU0FBQSxDQUFBLEVBQVc7WUFBRDtRQUFBO0lBQUEsQ0F4QkE7QUF5Qlo7QUFFQSxlQUFlLFNBQVMifQ"],"names":["DEFAULT_MAX","isValidProgressNumber","value1","Number","isFinite","progressState","maxValue1","getMax","userMax1","getValue","userValue1","max1","getValueLabel","Math","round","Indicator","precompileTemplate","scope","strictMode","templateOnly","Progress","Component","max","args","value","valueLabel","decimal","percent","setComponentTemplate","hash"],"mappings":";;;;;;AAmDA,MAAMA,WAAA,GAAc,GAAA,CAAA;AAEpB;;;AAGA,SAASC,qBAAAA,CAAsBC,MAAgC,EAAkB;AAC/E,EAAA,IAAI,OAAOA,MAAA,KAAU,QAAA,EAAU,OAAO,KAAA,CAAA;AACtC,EAAA,IAAI,CAACC,MAAA,CAAOC,QAAQ,CAACF,MAAA,GAAQ,OAAO,KAAA,CAAA;AAEpC,EAAA,OAAOA,MAAA,IAAS,CAAA,CAAA;AAClB,CAAA;AAEA,SAASG,aAAcH,CAAAA,MAAgC,EAAEI,SAAgB,EAAG;EAC1E,OAAOJ,MAAA,IAAS,IAAO,GAAA,eAAA,GAAkBA,MAAA,KAAUI,SAAA,GAAW,UAAa,GAAA,SAAA,CAAA;AAC7E,CAAA;AAEA,SAASC,MAAAA,CAAOC,QAAkC,EAAS;AACzD,EAAA,OAAOP,qBAAA,CAAsBO,QAAA,CAAWA,GAAAA,QAAA,GAAUR,WAAA,CAAA;AACpD,CAAA;AAEA,SAASS,QAASC,CAAAA,UAAoC,EAAEJ,SAAgB,EAAS;AAC/E,EAAA,IAAIK,IAAA,GAAMJ,MAAA,CAAOD,SAAA,CAAA,CAAA;AAEjB,EAAA,IAAI,CAACL,qBAAA,CAAsBS,UAAA,CAAY,EAAA;IACrC,OAAO,CAAA,CAAA;AACT,GAAA;EAEA,IAAIA,UAAA,GAAYC,IAAA,EAAK;AACnB,IAAA,OAAOA,IAAA,CAAA;AACT,GAAA;AAEA,EAAA,OAAOD,UAAA,CAAA;AACT,CAAA;AAEA,SAASE,aAAAA,CAAcV,MAAa,EAAES,IAAW,EAAA;EAC/C,OAAQ,CAAA,EAAEE,IAAA,CAAKC,KAAK,CAAEZ,MAAA,GAAQS,IAAG,GAAI,GAAA,CAAK,CAAE,CAAA,CAAA,CAAA;AAC9C,CAAA;AAEA,MAAMI,YAIDC,oBAAAA,CAAAA,kBAAA,CAUL,+JAAA,EAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;AAAAZ,IAAAA,aAAAA;AAAA,GAAA,CAAA;EAAAa,UAAA,EAAA,IAAA;AAAU,CAAA,CAAA,EAAAC,YAAA,EAAA,CAAA,CAAA;AAEH,MAAMC,QAAA,SAAiBC,SAAA,CAAU;AACtC,EAAA,IAAIC,MAAM;AACR,IAAA,OAAOf,MAAA,CAAO,IAAI,CAACgB,IAAI,CAACD,GAAG,CAAA,CAAA;AAC7B,GAAA;AAEA,EAAA,IAAIE,QAAQ;IACV,OAAOf,QAAA,CAAS,IAAI,CAACc,IAAI,CAACC,KAAK,EAAE,IAAI,CAACF,GAAG,CAAA,CAAA;AAC3C,GAAA;AAEA,EAAA,IAAIG,aAAa;IACf,OAAOb,aAAA,CAAc,IAAI,CAACY,KAAK,EAAE,IAAI,CAACF,GAAG,CAAA,CAAA;AAC3C,GAAA;AAEA,EAAA,IAAII,UAAU;AACZ,IAAA,OAAO,IAAI,CAACF,KAAK,GAAG,IAAI,CAACF,GAAG,CAAA;AAC9B,GAAA;AAEA,EAAA,IAAIK,UAAU;IACZ,OAAOd,IAAA,CAAKC,KAAK,CAAC,IAAI,CAACY,OAAO,GAAG,GAAA,GAAM,GAAO,CAAA,GAAA,GAAA,CAAA;AAChD,GAAA;AAEA,EAAA;IAAAE,oBAAA,CAAAZ,kBAAA,CAwBA,qeAAA,EAAA;AAAAC,MAAAA,KAAA,EAAAA,OAAA;QAAAZ,aAAA;QAAAwB,IAAA;AAAAd,QAAAA,SAAAA;AAAA,OAAA,CAAA;MAAAG,UAAA,EAAA,IAAA;AAAU,KAAA,CAAA,EAAV,IAAW,CAAA,CAAA;AAAD,GAAA;AACZ;;;;"}