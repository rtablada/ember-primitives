{"version":3,"file":"accordion.js","sources":["../../src/components/accordion.gts"],"sourcesContent":["import { template } from \"@ember/template-compiler\";\nimport Component from '@glimmer/component';\nimport { assert } from '@ember/debug';\nimport { hash } from '@ember/helper';\n// temp\n//  https://github.com/tracked-tools/tracked-toolbox/issues/38\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { localCopy } from 'tracked-toolbox';\nimport AccordionItem from './accordion/item.gts';\nimport type { WithBoundArgs } from '@glint/template';\ntype AccordionSingleArgs = {\n    /**\n   * The type of accordion. If `single`, only one item can be selected at a time. If `multiple`, multiple items can be selected at a time.\n   */ type: 'single';\n    /**\n   * Whether the accordion is disabled. When `true`, all items cannot be expanded or collapsed.\n   */ disabled?: boolean;\n    /**\n   * When type is `single`, whether the accordion is collapsible. When `true`, the selected item can be collapsed by clicking its trigger.\n   */ collapsible?: boolean;\n} & ({\n    /**\n       * The currently selected value. To be used in a controlled fashion in conjunction with `onValueChange`.\n       */ value: string;\n    /**\n       * A callback that is called when the selected value changes. To be used in a controlled fashion in conjunction with `value`.\n       */ onValueChange: (value: string | undefined) => void;\n    /**\n       * Not available in a controlled fashion.\n       */ defaultValue?: never;\n} | {\n    /**\n       * Not available in an uncontrolled fashion.\n       */ value?: never;\n    /**\n       * Not available in an uncontrolled fashion.\n       */ onValueChange?: never;\n    /**\n       * The default value of the accordion. To be used in an uncontrolled fashion.\n       */ defaultValue?: string;\n});\ntype AccordionMultipleArgs = {\n    /**\n   * The type of accordion. If `single`, only one item can be selected at a time. If `multiple`, multiple items can be selected at a time.\n   */ type: 'multiple';\n    /**\n   * Whether the accordion is disabled. When `true`, all items cannot be expanded or collapsed.\n   */ disabled?: boolean;\n} & ({\n    /**\n       * The currently selected values. To be used in a controlled fashion in conjunction with `onValueChange`.\n       */ value: string[];\n    /**\n       * A callback that is called when the selected values change. To be used in a controlled fashion in conjunction with `value`.\n       */ onValueChange: (value?: string[] | undefined) => void;\n    /**\n       * Not available in a controlled fashion.\n       */ defaultValue?: never;\n} | {\n    /**\n       * Not available in an uncontrolled fashion.\n       */ value?: never;\n    /**\n       * Not available in an uncontrolled fashion.\n       */ onValueChange?: never;\n    /**\n       * The default values of the accordion. To be used in an uncontrolled fashion.\n       */ defaultValue?: string[];\n});\nexport class Accordion extends Component<{\n    Element: HTMLDivElement;\n    Args: AccordionSingleArgs | AccordionMultipleArgs;\n    Blocks: {\n        default: [{\n                /**\n         * The AccordionItem component.\n         */ Item: WithBoundArgs<typeof AccordionItem, 'selectedValue' | 'toggleItem' | 'disabled'>;\n            }];\n    };\n}> {\n    static{\n        template(`\n    <div data-disabled={{@disabled}} ...attributes>\n      {{yield\n        (hash\n          Item=(component\n            AccordionItem\n            selectedValue=this.selectedValue\n            toggleItem=this.toggleItem\n            disabled=@disabled\n          )\n        )\n      }}\n    </div>\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n    @localCopy('args.defaultValue')\n    _internallyManagedValue?: string | string[];\n    get selectedValue() {\n        return this.args.value ?? this._internallyManagedValue;\n    }\n    toggleItem = (value1: string)=>{\n        if (this.args.disabled) {\n            return;\n        }\n        if (this.args.type === 'single') {\n            this.toggleItemSingle(value1);\n        } else if (this.args.type === 'multiple') {\n            this.toggleItemMultiple(value1);\n        }\n    };\n    toggleItemSingle = (value1: string)=>{\n        assert('Cannot call `toggleItemSingle` when `disabled` is true.', !this.args.disabled);\n        assert('Cannot call `toggleItemSingle` when `type` is not `single`.', this.args.type === 'single');\n        if (value1 === this.selectedValue && !this.args.collapsible) {\n            return;\n        }\n        const newValue1 = value1 === this.selectedValue ? undefined : value1;\n        if (this.args.onValueChange) {\n            this.args.onValueChange(newValue1);\n        } else {\n            this._internallyManagedValue = newValue1;\n        }\n    };\n    toggleItemMultiple = (value1: string)=>{\n        assert('Cannot call `toggleItemMultiple` when `disabled` is true.', !this.args.disabled);\n        assert('Cannot call `toggleItemMultiple` when `type` is not `multiple`.', this.args.type === 'multiple');\n        const currentValues1 = (this.selectedValue as string[] | undefined) ?? [];\n        const indexOfValue1 = currentValues1.indexOf(value1);\n        let newValue1: string[];\n        if (indexOfValue1 === -1) {\n            newValue1 = [\n                ...currentValues1,\n                value1\n            ];\n        } else {\n            newValue1 = [\n                ...currentValues1.slice(0, indexOfValue1),\n                ...currentValues1.slice(indexOfValue1 + 1)\n            ];\n        }\n        if (this.args.onValueChange) {\n            this.args.onValueChange(newValue1);\n        } else {\n            this._internallyManagedValue = newValue1;\n        }\n    };\n}\nexport default Accordion;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2VtYmVyLXByaW1pdGl2ZXMvZW1iZXItcHJpbWl0aXZlcy9lbWJlci1wcmltaXRpdmVzL3NyYy9jb21wb25lbnRzL2FjY29yZGlvbi5ndHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbXBvbmVudCBmcm9tICdAZ2xpbW1lci9jb21wb25lbnQnO1xuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnQGVtYmVyL2RlYnVnJztcbmltcG9ydCB7IGhhc2ggfSBmcm9tICdAZW1iZXIvaGVscGVyJztcblxuLy8gdGVtcFxuLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS90cmFja2VkLXRvb2xzL3RyYWNrZWQtdG9vbGJveC9pc3N1ZXMvMzhcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IGxvY2FsQ29weSB9IGZyb20gJ3RyYWNrZWQtdG9vbGJveCc7XG5cbmltcG9ydCBBY2NvcmRpb25JdGVtIGZyb20gJy4vYWNjb3JkaW9uL2l0ZW0uZ3RzJztcblxuaW1wb3J0IHR5cGUgeyBXaXRoQm91bmRBcmdzIH0gZnJvbSAnQGdsaW50L3RlbXBsYXRlJztcblxudHlwZSBBY2NvcmRpb25TaW5nbGVBcmdzID0ge1xuICAvKipcbiAgICogVGhlIHR5cGUgb2YgYWNjb3JkaW9uLiBJZiBgc2luZ2xlYCwgb25seSBvbmUgaXRlbSBjYW4gYmUgc2VsZWN0ZWQgYXQgYSB0aW1lLiBJZiBgbXVsdGlwbGVgLCBtdWx0aXBsZSBpdGVtcyBjYW4gYmUgc2VsZWN0ZWQgYXQgYSB0aW1lLlxuICAgKi9cbiAgdHlwZTogJ3NpbmdsZSc7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBhY2NvcmRpb24gaXMgZGlzYWJsZWQuIFdoZW4gYHRydWVgLCBhbGwgaXRlbXMgY2Fubm90IGJlIGV4cGFuZGVkIG9yIGNvbGxhcHNlZC5cbiAgICovXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFdoZW4gdHlwZSBpcyBgc2luZ2xlYCwgd2hldGhlciB0aGUgYWNjb3JkaW9uIGlzIGNvbGxhcHNpYmxlLiBXaGVuIGB0cnVlYCwgdGhlIHNlbGVjdGVkIGl0ZW0gY2FuIGJlIGNvbGxhcHNlZCBieSBjbGlja2luZyBpdHMgdHJpZ2dlci5cbiAgICovXG4gIGNvbGxhcHNpYmxlPzogYm9vbGVhbjtcbn0gJiAoXG4gIHwge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgY3VycmVudGx5IHNlbGVjdGVkIHZhbHVlLiBUbyBiZSB1c2VkIGluIGEgY29udHJvbGxlZCBmYXNoaW9uIGluIGNvbmp1bmN0aW9uIHdpdGggYG9uVmFsdWVDaGFuZ2VgLlxuICAgICAgICovXG4gICAgICB2YWx1ZTogc3RyaW5nO1xuICAgICAgLyoqXG4gICAgICAgKiBBIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHNlbGVjdGVkIHZhbHVlIGNoYW5nZXMuIFRvIGJlIHVzZWQgaW4gYSBjb250cm9sbGVkIGZhc2hpb24gaW4gY29uanVuY3Rpb24gd2l0aCBgdmFsdWVgLlxuICAgICAgICovXG4gICAgICBvblZhbHVlQ2hhbmdlOiAodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgICAgIC8qKlxuICAgICAgICogTm90IGF2YWlsYWJsZSBpbiBhIGNvbnRyb2xsZWQgZmFzaGlvbi5cbiAgICAgICAqL1xuICAgICAgZGVmYXVsdFZhbHVlPzogbmV2ZXI7XG4gICAgfVxuICB8IHtcbiAgICAgIC8qKlxuICAgICAgICogTm90IGF2YWlsYWJsZSBpbiBhbiB1bmNvbnRyb2xsZWQgZmFzaGlvbi5cbiAgICAgICAqL1xuICAgICAgdmFsdWU_OiBuZXZlcjtcbiAgICAgIC8qKlxuICAgICAgICogTm90IGF2YWlsYWJsZSBpbiBhbiB1bmNvbnRyb2xsZWQgZmFzaGlvbi5cbiAgICAgICAqL1xuICAgICAgb25WYWx1ZUNoYW5nZT86IG5ldmVyO1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgYWNjb3JkaW9uLiBUbyBiZSB1c2VkIGluIGFuIHVuY29udHJvbGxlZCBmYXNoaW9uLlxuICAgICAgICovXG4gICAgICBkZWZhdWx0VmFsdWU_OiBzdHJpbmc7XG4gICAgfVxuKTtcblxudHlwZSBBY2NvcmRpb25NdWx0aXBsZUFyZ3MgPSB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBhY2NvcmRpb24uIElmIGBzaW5nbGVgLCBvbmx5IG9uZSBpdGVtIGNhbiBiZSBzZWxlY3RlZCBhdCBhIHRpbWUuIElmIGBtdWx0aXBsZWAsIG11bHRpcGxlIGl0ZW1zIGNhbiBiZSBzZWxlY3RlZCBhdCBhIHRpbWUuXG4gICAqL1xuICB0eXBlOiAnbXVsdGlwbGUnO1xuICAvKipcbiAgICogV2hldGhlciB0aGUgYWNjb3JkaW9uIGlzIGRpc2FibGVkLiBXaGVuIGB0cnVlYCwgYWxsIGl0ZW1zIGNhbm5vdCBiZSBleHBhbmRlZCBvciBjb2xsYXBzZWQuXG4gICAqL1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG59ICYgKFxuICB8IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGN1cnJlbnRseSBzZWxlY3RlZCB2YWx1ZXMuIFRvIGJlIHVzZWQgaW4gYSBjb250cm9sbGVkIGZhc2hpb24gaW4gY29uanVuY3Rpb24gd2l0aCBgb25WYWx1ZUNoYW5nZWAuXG4gICAgICAgKi9cbiAgICAgIHZhbHVlOiBzdHJpbmdbXTtcbiAgICAgIC8qKlxuICAgICAgICogQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBzZWxlY3RlZCB2YWx1ZXMgY2hhbmdlLiBUbyBiZSB1c2VkIGluIGEgY29udHJvbGxlZCBmYXNoaW9uIGluIGNvbmp1bmN0aW9uIHdpdGggYHZhbHVlYC5cbiAgICAgICAqL1xuICAgICAgb25WYWx1ZUNoYW5nZTogKHZhbHVlPzogc3RyaW5nW10gfCB1bmRlZmluZWQpID0-IHZvaWQ7XG4gICAgICAvKipcbiAgICAgICAqIE5vdCBhdmFpbGFibGUgaW4gYSBjb250cm9sbGVkIGZhc2hpb24uXG4gICAgICAgKi9cbiAgICAgIGRlZmF1bHRWYWx1ZT86IG5ldmVyO1xuICAgIH1cbiAgfCB7XG4gICAgICAvKipcbiAgICAgICAqIE5vdCBhdmFpbGFibGUgaW4gYW4gdW5jb250cm9sbGVkIGZhc2hpb24uXG4gICAgICAgKi9cbiAgICAgIHZhbHVlPzogbmV2ZXI7XG4gICAgICAvKipcbiAgICAgICAqIE5vdCBhdmFpbGFibGUgaW4gYW4gdW5jb250cm9sbGVkIGZhc2hpb24uXG4gICAgICAgKi9cbiAgICAgIG9uVmFsdWVDaGFuZ2U_OiBuZXZlcjtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGRlZmF1bHQgdmFsdWVzIG9mIHRoZSBhY2NvcmRpb24uIFRvIGJlIHVzZWQgaW4gYW4gdW5jb250cm9sbGVkIGZhc2hpb24uXG4gICAgICAgKi9cbiAgICAgIGRlZmF1bHRWYWx1ZT86IHN0cmluZ1tdO1xuICAgIH1cbik7XG5cbmV4cG9ydCBjbGFzcyBBY2NvcmRpb24gZXh0ZW5kcyBDb21wb25lbnQ8e1xuICBFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcbiAgQXJnczogQWNjb3JkaW9uU2luZ2xlQXJncyB8IEFjY29yZGlvbk11bHRpcGxlQXJncztcbiAgQmxvY2tzOiB7XG4gICAgZGVmYXVsdDogW1xuICAgICAge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIEFjY29yZGlvbkl0ZW0gY29tcG9uZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgSXRlbTogV2l0aEJvdW5kQXJnczx0eXBlb2YgQWNjb3JkaW9uSXRlbSwgJ3NlbGVjdGVkVmFsdWUnIHwgJ3RvZ2dsZUl0ZW0nIHwgJ2Rpc2FibGVkJz47XG4gICAgICB9LFxuICAgIF07XG4gIH07XG59PiB7XG4gIDx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGRhdGEtZGlzYWJsZWQ9e3tAZGlzYWJsZWR9fSAuLi5hdHRyaWJ1dGVzPlxuICAgICAge3t5aWVsZFxuICAgICAgICAoaGFzaFxuICAgICAgICAgIEl0ZW09KGNvbXBvbmVudFxuICAgICAgICAgICAgQWNjb3JkaW9uSXRlbVxuICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZT10aGlzLnNlbGVjdGVkVmFsdWVcbiAgICAgICAgICAgIHRvZ2dsZUl0ZW09dGhpcy50b2dnbGVJdGVtXG4gICAgICAgICAgICBkaXNhYmxlZD1AZGlzYWJsZWRcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIH19XG4gICAgPC9kaXY-XG4gIDwvdGVtcGxhdGU-XG5cbiAgQGxvY2FsQ29weSgnYXJncy5kZWZhdWx0VmFsdWUnKSBkZWNsYXJlIF9pbnRlcm5hbGx5TWFuYWdlZFZhbHVlPzogc3RyaW5nIHwgc3RyaW5nW107XG5cbiAgZ2V0IHNlbGVjdGVkVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJncy52YWx1ZSA_PyB0aGlzLl9pbnRlcm5hbGx5TWFuYWdlZFZhbHVlO1xuICB9XG5cbiAgdG9nZ2xlSXRlbSA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgaWYgKHRoaXMuYXJncy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFyZ3MudHlwZSA9PT0gJ3NpbmdsZScpIHtcbiAgICAgIHRoaXMudG9nZ2xlSXRlbVNpbmdsZSh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmFyZ3MudHlwZSA9PT0gJ211bHRpcGxlJykge1xuICAgICAgdGhpcy50b2dnbGVJdGVtTXVsdGlwbGUodmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICB0b2dnbGVJdGVtU2luZ2xlID0gKHZhbHVlOiBzdHJpbmcpID0-IHtcbiAgICBhc3NlcnQoJ0Nhbm5vdCBjYWxsIGB0b2dnbGVJdGVtU2luZ2xlYCB3aGVuIGBkaXNhYmxlZGAgaXMgdHJ1ZS4nLCAhdGhpcy5hcmdzLmRpc2FibGVkKTtcbiAgICBhc3NlcnQoXG4gICAgICAnQ2Fubm90IGNhbGwgYHRvZ2dsZUl0ZW1TaW5nbGVgIHdoZW4gYHR5cGVgIGlzIG5vdCBgc2luZ2xlYC4nLFxuICAgICAgdGhpcy5hcmdzLnR5cGUgPT09ICdzaW5nbGUnXG4gICAgKTtcblxuICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5zZWxlY3RlZFZhbHVlICYmICF0aGlzLmFyZ3MuY29sbGFwc2libGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlID09PSB0aGlzLnNlbGVjdGVkVmFsdWUgPyB1bmRlZmluZWQgOiB2YWx1ZTtcblxuICAgIGlmICh0aGlzLmFyZ3Mub25WYWx1ZUNoYW5nZSkge1xuICAgICAgdGhpcy5hcmdzLm9uVmFsdWVDaGFuZ2UobmV3VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9pbnRlcm5hbGx5TWFuYWdlZFZhbHVlID0gbmV3VmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIHRvZ2dsZUl0ZW1NdWx0aXBsZSA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgYXNzZXJ0KCdDYW5ub3QgY2FsbCBgdG9nZ2xlSXRlbU11bHRpcGxlYCB3aGVuIGBkaXNhYmxlZGAgaXMgdHJ1ZS4nLCAhdGhpcy5hcmdzLmRpc2FibGVkKTtcbiAgICBhc3NlcnQoXG4gICAgICAnQ2Fubm90IGNhbGwgYHRvZ2dsZUl0ZW1NdWx0aXBsZWAgd2hlbiBgdHlwZWAgaXMgbm90IGBtdWx0aXBsZWAuJyxcbiAgICAgIHRoaXMuYXJncy50eXBlID09PSAnbXVsdGlwbGUnXG4gICAgKTtcblxuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZXMgPSAodGhpcy5zZWxlY3RlZFZhbHVlIGFzIHN0cmluZ1tdIHwgdW5kZWZpbmVkKSA_PyBbXTtcbiAgICBjb25zdCBpbmRleE9mVmFsdWUgPSBjdXJyZW50VmFsdWVzLmluZGV4T2YodmFsdWUpO1xuICAgIGxldCBuZXdWYWx1ZTogc3RyaW5nW107XG5cbiAgICBpZiAoaW5kZXhPZlZhbHVlID09PSAtMSkge1xuICAgICAgbmV3VmFsdWUgPSBbLi4uY3VycmVudFZhbHVlcywgdmFsdWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdWYWx1ZSA9IFtcbiAgICAgICAgLi4uY3VycmVudFZhbHVlcy5zbGljZSgwLCBpbmRleE9mVmFsdWUpLFxuICAgICAgICAuLi5jdXJyZW50VmFsdWVzLnNsaWNlKGluZGV4T2ZWYWx1ZSArIDEpLFxuICAgICAgXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hcmdzLm9uVmFsdWVDaGFuZ2UpIHtcbiAgICAgIHRoaXMuYXJncy5vblZhbHVlQ2hhbmdlKG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faW50ZXJuYWxseU1hbmFnZWRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQWNjb3JkaW9uO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLGVBQWUscUJBQXFCO0FBQzNDLFNBQVMsTUFBTSxRQUFRLGVBQWU7QUFDdEMsU0FBUyxJQUFJLFFBQVEsZ0JBQWdCO0FBRXJDLE9BQU87QUFDUCw4REFBOEQ7QUFDOUQsNkRBQTZEO0FBQzdELGFBQWE7QUFDYixTQUFTLFNBQVMsUUFBUSxrQkFBa0I7QUFFNUMsT0FBTyxtQkFBbUIsdUJBQXVCO0FBRWpELGNBQWMsYUFBYSxRQUFRLGtCQUFrQjtLQUVoRDtJQUNIOztHQUVDLEdBQ0QsTUFBTTtJQUNOOztHQUVDLEdBQ0QsV0FBVyxPQUFPO0lBQ2xCOztHQUVDLEdBQ0QsY0FBYyxPQUFPOztJQUdqQjs7T0FFQyxHQUNELE9BQU8sTUFBTTtJQUNiOztPQUVDLEdBQ0QsZ0JBQWdCLE9BQU8sTUFBTSxHQUFHLFNBQVMsS0FBSyxJQUFJ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"],"names":["Accordion","Component","setComponentTemplate","precompileTemplate","scope","hash","AccordionItem","strictMode","g","this","prototype","localCopy","i","void 0","selectedValue","args","value","_internallyManagedValue","toggleItem","value1","disabled","type","toggleItemSingle","toggleItemMultiple","assert","collapsible","newValue1","undefined","onValueChange","currentValues1","indexOfValue1","indexOf","slice"],"mappings":"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"}