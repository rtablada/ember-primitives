{"version":3,"file":"shadowed.js","sources":["../../src/components/shadowed.gts"],"sourcesContent":["import { template } from \"@ember/template-compiler\";\nimport { modifier } from 'ember-modifier';\nimport { cell } from 'ember-resources';\nimport type { TOC } from '@ember/component/template-only';\nconst Shadow = ()=>{\n    let shadow1 = cell<Element>();\n    return {\n        get root () {\n            return shadow1.current;\n        },\n        attach: modifier((element1: Element)=>{\n            let shadowRoot1 = element1.attachShadow({\n                mode: 'open'\n            });\n            let div1 = document.createElement('div');\n            // ember-source 5.6 broke the ability to in-element\n            // natively into a shadowroot.\n            //\n            // See these ember-source bugs:\n            // - https://github.com/emberjs/ember.js/issues/20643\n            // - https://github.com/emberjs/ember.js/issues/20642\n            // - https://github.com/emberjs/ember.js/issues/20641\n            shadowRoot1.appendChild(div1);\n            shadow1.set(div1);\n        })\n    };\n};\n// index.html has the production-fingerprinted references to these links\n// Ideally, we'd have some pre-processor scan everything for references to\n// assets in public, but idk how to set that up\nconst getStyles = ()=>[\n        ...document.querySelectorAll('link')\n    ].map((link1)=>link1.href);\n/**\n * style + native @import\n * is the only robust way to load styles in a shadowroot.\n *\n * link is only valid in the head element.\n */ const Styles = template(`\n  <style>\n    {{#each (getStyles) as |styleHref|}}\n\n      @import \"{{styleHref}}\";\n\n    {{/each}}\n  </style>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\n/**\n * Render content in a shadow dom, attached to a div.\n *\n * Uses the [shadow DOM][mdn-shadow-dom] API.\n *\n * [mdn-shadow-dom]: https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM\n *\n * This is useful when you want to render content that escapes your app's styles.\n */ export const Shadowed: TOC<{\n    /**\n   * The shadow dom attaches to a div element.\n   * You may specify any attribute, and it'll be applied to this host element.\n   */ Element: HTMLDivElement;\n    Args: {\n        /**\n     * @public\n     *\n     * By default, shadow-dom does not include any styles.\n     * Setting this to true will include all the `<style>` tags\n     * that are present in the `<head>` element.\n     */ includeStyles?: boolean;\n    };\n    Blocks: {\n        /**\n     * Content to be placed within the ShadowDOM\n     */ default: [];\n    };\n}> = template(`\n  {{#let (Shadow) as |shadow|}}\n    {{! TODO: We need a way in ember to render in to a shadow dom without an effect }}\n    <div {{shadow.attach}} ...attributes></div>\n\n    {{#if shadow.root}}\n      {{#in-element shadow.root}}\n\n        {{#if @includeStyles}}\n          <Styles />\n        {{/if}}\n\n        {{yield}}\n\n      {{/in-element}}\n    {{/if}}\n  {{/let}}\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nexport default Shadowed;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2VtYmVyLXByaW1pdGl2ZXMvZW1iZXItcHJpbWl0aXZlcy9lbWJlci1wcmltaXRpdmVzL3NyYy9jb21wb25lbnRzL3NoYWRvd2VkLmd0cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtb2RpZmllciB9IGZyb20gJ2VtYmVyLW1vZGlmaWVyJztcbmltcG9ydCB7IGNlbGwgfSBmcm9tICdlbWJlci1yZXNvdXJjZXMnO1xuXG5pbXBvcnQgdHlwZSB7IFRPQyB9IGZyb20gJ0BlbWJlci9jb21wb25lbnQvdGVtcGxhdGUtb25seSc7XG5cbmNvbnN0IFNoYWRvdyA9ICgpID0-IHtcbiAgbGV0IHNoYWRvdyA9IGNlbGw8RWxlbWVudD4oKTtcblxuICByZXR1cm4ge1xuICAgIGdldCByb290KCkge1xuICAgICAgcmV0dXJuIHNoYWRvdy5jdXJyZW50O1xuICAgIH0sXG4gICAgYXR0YWNoOiBtb2RpZmllcigoZWxlbWVudDogRWxlbWVudCkgPT4ge1xuICAgICAgbGV0IHNoYWRvd1Jvb3QgPSBlbGVtZW50LmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgLy8gZW1iZXItc291cmNlIDUuNiBicm9rZSB0aGUgYWJpbGl0eSB0byBpbi1lbGVtZW50XG4gICAgICAvLyBuYXRpdmVseSBpbnRvIGEgc2hhZG93cm9vdC5cbiAgICAgIC8vXG4gICAgICAvLyBTZWUgdGhlc2UgZW1iZXItc291cmNlIGJ1Z3M6XG4gICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9lbWJlcmpzL2VtYmVyLmpzL2lzc3Vlcy8yMDY0M1xuICAgICAgLy8gLSBodHRwczovL2dpdGh1Yi5jb20vZW1iZXJqcy9lbWJlci5qcy9pc3N1ZXMvMjA2NDJcbiAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2VtYmVyanMvZW1iZXIuanMvaXNzdWVzLzIwNjQxXG4gICAgICBzaGFkb3dSb290LmFwcGVuZENoaWxkKGRpdik7XG5cbiAgICAgIHNoYWRvdy5zZXQoZGl2KTtcbiAgICB9KSxcbiAgfTtcbn07XG5cbi8vIGluZGV4Lmh0bWwgaGFzIHRoZSBwcm9kdWN0aW9uLWZpbmdlcnByaW50ZWQgcmVmZXJlbmNlcyB0byB0aGVzZSBsaW5rc1xuLy8gSWRlYWxseSwgd2UnZCBoYXZlIHNvbWUgcHJlLXByb2Nlc3NvciBzY2FuIGV2ZXJ5dGhpbmcgZm9yIHJlZmVyZW5jZXMgdG9cbi8vIGFzc2V0cyBpbiBwdWJsaWMsIGJ1dCBpZGsgaG93IHRvIHNldCB0aGF0IHVwXG5jb25zdCBnZXRTdHlsZXMgPSAoKSA9PiBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGluaycpXS5tYXAoKGxpbmspID0-IGxpbmsuaHJlZik7XG5cbi8qKlxuICogc3R5bGUgKyBuYXRpdmUgQGltcG9ydFxuICogaXMgdGhlIG9ubHkgcm9idXN0IHdheSB0byBsb2FkIHN0eWxlcyBpbiBhIHNoYWRvd3Jvb3QuXG4gKlxuICogbGluayBpcyBvbmx5IHZhbGlkIGluIHRoZSBoZWFkIGVsZW1lbnQuXG4gKi9cbmNvbnN0IFN0eWxlcyA9IDx0ZW1wbGF0ZT5cbiAgPHN0eWxlPlxuICAgIHt7I2VhY2ggKGdldFN0eWxlcykgYXMgfHN0eWxlSHJlZnx9fVxuXG4gICAgICBAaW1wb3J0IFwie3tzdHlsZUhyZWZ9fVwiO1xuXG4gICAge3svZWFjaH19XG4gIDwvc3R5bGU-XG48L3RlbXBsYXRlPjtcblxuLyoqXG4gKiBSZW5kZXIgY29udGVudCBpbiBhIHNoYWRvdyBkb20sIGF0dGFjaGVkIHRvIGEgZGl2LlxuICpcbiAqIFVzZXMgdGhlIFtzaGFkb3cgRE9NXVttZG4tc2hhZG93LWRvbV0gQVBJLlxuICpcbiAqIFttZG4tc2hhZG93LWRvbV06IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJfY29tcG9uZW50cy9Vc2luZ19zaGFkb3dfRE9NXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byByZW5kZXIgY29udGVudCB0aGF0IGVzY2FwZXMgeW91ciBhcHAncyBzdHlsZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBTaGFkb3dlZDogVE9DPHtcbiAgLyoqXG4gICAqIFRoZSBzaGFkb3cgZG9tIGF0dGFjaGVzIHRvIGEgZGl2IGVsZW1lbnQuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhbnkgYXR0cmlidXRlLCBhbmQgaXQnbGwgYmUgYXBwbGllZCB0byB0aGlzIGhvc3QgZWxlbWVudC5cbiAgICovXG4gIEVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50O1xuICBBcmdzOiB7XG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgc2hhZG93LWRvbSBkb2VzIG5vdCBpbmNsdWRlIGFueSBzdHlsZXMuXG4gICAgICogU2V0dGluZyB0aGlzIHRvIHRydWUgd2lsbCBpbmNsdWRlIGFsbCB0aGUgYDxzdHlsZT5gIHRhZ3NcbiAgICAgKiB0aGF0IGFyZSBwcmVzZW50IGluIHRoZSBgPGhlYWQ-YCBlbGVtZW50LlxuICAgICAqL1xuICAgIGluY2x1ZGVTdHlsZXM_OiBib29sZWFuO1xuICB9O1xuICBCbG9ja3M6IHtcbiAgICAvKipcbiAgICAgKiBDb250ZW50IHRvIGJlIHBsYWNlZCB3aXRoaW4gdGhlIFNoYWRvd0RPTVxuICAgICAqL1xuICAgIGRlZmF1bHQ6IFtdO1xuICB9O1xufT4gPSA8dGVtcGxhdGU-XG4gIHt7I2xldCAoU2hhZG93KSBhcyB8c2hhZG93fH19XG4gICAge3shIFRPRE86IFdlIG5lZWQgYSB3YXkgaW4gZW1iZXIgdG8gcmVuZGVyIGluIHRvIGEgc2hhZG93IGRvbSB3aXRob3V0IGFuIGVmZmVjdCB9fVxuICAgIDxkaXYge3tzaGFkb3cuYXR0YWNofX0gLi4uYXR0cmlidXRlcz48L2Rpdj5cblxuICAgIHt7I2lmIHNoYWRvdy5yb290fX1cbiAgICAgIHt7I2luLWVsZW1lbnQgc2hhZG93LnJvb3R9fVxuXG4gICAgICAgIHt7I2lmIEBpbmNsdWRlU3R5bGVzfX1cbiAgICAgICAgICA8U3R5bGVzIC8-XG4gICAgICAgIHt7L2lmfX1cblxuICAgICAgICB7e3lpZWxkfX1cblxuICAgICAge3svaW4tZWxlbWVudH19XG4gICAge3svaWZ9fVxuICB7ey9sZXR9fVxuPC90ZW1wbGF0ZT47XG5cbmV4cG9ydCBkZWZhdWx0IFNoYWRvd2VkO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxTQUFTLFFBQVEsUUFBUSxpQkFBaUI7QUFDMUMsU0FBUyxJQUFJLFFBQVEsa0JBQWtCO0FBRXZDLGNBQWMsR0FBRyxRQUFRLGlDQUFpQztBQUUxRCxNQUFNLFNBQVM7SUFDYixJQUFJLFVBQVMsS0FBSztJQUVsQixPQUFPO1FBQ0wsSUFBSSxRQUFPO1lBQ1QsT0FBTyxRQUFPLE9BQU87UUFDdkI7UUFDQSxRQUFRLFNBQVMsQ0FBQyxVQUFTO1lBQ3pCLElBQUksY0FBYSxTQUFRLFlBQVksQ0FBQztnQkFBRSxNQUFNO1lBQU87WUFDckQsSUFBSSxPQUFNLFNBQVMsYUFBYSxDQUFDO1lBRWpDLG1EQUFtRDtZQUNuRCw4QkFBOEI7WUFDOUIsRUFBRTtZQUNGLCtCQUErQjtZQUMvQixxREFBcUQ7WUFDckQscURBQXFEO1lBQ3JELHFEQUFxRDtZQUNyRCxZQUFXLFdBQVcsQ0FBQztZQUV2QixRQUFPLEdBQUcsQ0FBQztRQUNiO0lBQ0Y7QUFDRjtBQUVBLHdFQUF3RTtBQUN4RSwwRUFBMEU7QUFDMUUsK0NBQStDO0FBQy9DLE1BQU0sWUFBWSxJQUFNO1dBQUksU0FBUyxnQkFBZ0IsQ0FBQztLQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUyxNQUFLLElBQUk7QUFFdEY7Ozs7O0NBS0MsR0FDRCxNQUFNLFNBQVMsU0FBVSxDQUFBOzs7Ozs7OztBQVF6QixDQUFBLEVBQUE7SUFBQTtRQUFBLE9BQUEsS0FBQSxTQUFBLENBQUEsRUFBVztJQUFEO0FBQUE7QUFFVjs7Ozs7Ozs7Q0FRQyxHQUNELE9BQU8sTUFBTSxVQUFVO0lBQ3JCOzs7R0FHQyxHQUNELFNBQVM7SUFDVDtRQUNFOzs7Ozs7S0FNQyxHQUNELGdCQUFnQixPQUFPOztJQUV6QjtRQUNFOztLQUVDLEdBQ0Q7O0tBRUMsU0FBVSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCZixDQUFBLEVBQUE7SUFBQTtRQUFBLE9BQUEsS0FBQSxTQUFBLENBQUEsRUFBVztJQUFEO0FBQUEsR0FBRTtBQUVaLGVBQWUsU0FBUyJ9"],"names":["Shadow","shadow1","cell","root","current","attach","modifier","element1","shadowRoot1","attachShadow","mode","div1","document","createElement","appendChild","set","getStyles","querySelectorAll","map","link1","href","Styles","setComponentTemplate","precompileTemplate","scope","strictMode","templateOnly","Shadowed"],"mappings":";;;;;;AAKA,MAAMA,MAAA,GAASA,MAAA;EACb,IAAIC,OAAA,GAASC,IAAA,EAAK,CAAA;EAElB,OAAO;AACL,IAAA,IAAIC,OAAO;MACT,OAAOF,OAAA,CAAOG,OAAO,CAAA;AACvB,KAAA;IACAC,MAAA,EAAQC,QAAA,CAAUC,QAAS,IAAA;AACzB,MAAA,IAAIC,WAAA,GAAaD,QAAA,CAAQE,YAAY,CAAC;AAAEC,QAAAA,IAAA,EAAM,MAAA;AAAO,OAAA,CAAA,CAAA;AACrD,MAAA,IAAIC,IAAA,GAAMC,QAAA,CAASC,aAAa,CAAC,KAAA,CAAA,CAAA;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;MACAL,WAAA,CAAWM,WAAW,CAACH,IAAA,CAAA,CAAA;MAEvBV,OAAA,CAAOc,GAAG,CAACJ,IAAA,CAAA,CAAA;AACb,KAAA,CAAA;AACF,GAAA,CAAA;AACF,CAAA,CAAA;AAEA;AACA;AACA;AACA,MAAMK,SAAA,GAAYA,MAAM,IAAIJ,QAAA,CAASK,gBAAgB,CAAC,MAAA,CAAA,CAAQ,CAACC,GAAG,CAAEC,KAAA,IAASA,KAAA,CAAKC,IAAI,CAAA,CAAA;AAEtF;;;;;;AAMA,MAAMC,MAAA,GAAAC,oBAAA,CAASC,kBAAA,CAQf,0HAAA,EAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;AAAAR,IAAAA,SAAAA;AAAA,GAAA,CAAA;EAAAS,UAAA,EAAA,IAAA;AAAU,CAAA,CAAA,EAAAC,YAAA,EAAA,CAAA,CAAA;AAEV;;;;;;;;;AASaC,MAAAA,WAsBRJ,oBAAAA,CAAAA,kBAAA,CAiBL,gYAAA,EAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAxB,MAAA;AAAAqB,IAAAA,MAAAA;AAAA,GAAA,CAAA;EAAAI,UAAA,EAAA,IAAA;AAAU,CAAA,CAAA,EAAAC,YAAA,EAAA;;;;"}