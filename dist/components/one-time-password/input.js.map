{"version":3,"file":"input.js","sources":["../../../src/components/one-time-password/input.gts"],"sourcesContent":["import { template } from \"@ember/template-compiler\";\nimport Component from '@glimmer/component';\nimport { warn } from '@ember/debug';\nimport { isDestroyed, isDestroying } from '@ember/destroyable';\nimport { on } from '@ember/modifier';\nimport { buildWaiter } from '@ember/test-waiters';\nimport { autoAdvance, getCollectiveValue, handleNavigation, handlePaste, selectAll } from './utils.ts';\nimport type { TOC } from '@ember/component/template-only';\nimport type { WithBoundArgs } from '@glint/template';\nconst DEFAULT_LENGTH = 6;\nfunction labelFor(inputIndex1: number, labelFn1: undefined | ((index: number) => string)) {\n    if (labelFn1) {\n        return labelFn1(inputIndex1);\n    }\n    return `Please enter OTP character ${inputIndex1 + 1}`;\n}\nlet waiter = buildWaiter('ember-primitives:OTPInput:handleChange');\nconst Fields: TOC<{\n    /**\n   * Any attributes passed to this component will be applied to each input.\n   */ Element: HTMLInputElement;\n    Args: {\n        fields: unknown[];\n        labelFn: (index: number) => string;\n        handleChange: (event: Event) => void;\n    };\n}> = template(`\n  {{#each @fields as |_field i|}}\n    <label>\n      <span class=\"ember-primitives__sr-only\">{{labelFor i @labelFn}}</span>\n      <input\n        name=\"code{{i}}\"\n        type=\"text\"\n        inputmode=\"numeric\"\n        autocomplete=\"off\"\n        ...attributes\n        {{on \"click\" selectAll}}\n        {{on \"paste\" handlePaste}}\n        {{on \"input\" autoAdvance}}\n        {{on \"input\" @handleChange}}\n        {{on \"keydown\" handleNavigation}}\n      />\n    </label>\n  {{/each}}\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nexport class OTPInput extends Component<{\n    /**\n   * The collection of individual OTP inputs are contained by a fieldset.\n   * Applying the `disabled` attribute to this fieldset will disable\n   * all of the inputs, if that's desired.\n   */ Element: HTMLFieldSetElement;\n    Args: {\n        /**\n     * How many characters the one-time-password field should be\n     * Defaults to 6\n     */ length?: number;\n        /**\n     * To Customize the label of the input fields, you may pass a function.\n     * By default, this is `Please enter OTP character ${index + 1}`.\n     */ labelFn?: (index: number) => string;\n        /**\n     * If passed, this function will be called when the <Input> changes.\n     * All fields are considered one input.\n     */ onChange?: (data: {\n            /**\n         * The text from the collective `<Input>`\n         *\n         * `code` _may_ be shorter than `length`\n         * if the user has not finished typing / pasting their code\n         */ code: string;\n            /**\n         * will be `true` if `code`'s length matches the passed `@length` or the default of 6\n         */ complete: boolean;\n        }, /**\n       * The last input event received\n       */ event: Event) => void;\n    };\n    Blocks: {\n        /**\n     * Optionally, you may control how the Fields are rendered, with proceeding text,\n     * additional attributes added, etc.\n     *\n     * This is how you can add custom validation to each input field.\n     */ default?: [fields: WithBoundArgs<typeof Fields, 'fields' | 'handleChange' | 'labelFn'>];\n    };\n}> {\n    /**\n   * This is debounced, because we bind to each input,\n   * but only want to emit one change event if someone pastes\n   * multiple characters\n   */ handleChange = (event1: Event)=>{\n        if (!this.args.onChange) return;\n        if (!this.#token) {\n            this.#token = waiter.beginAsync();\n        }\n        if (this.#frame) {\n            cancelAnimationFrame(this.#frame);\n        }\n        // We  use requestAnimationFrame to be friendly to rendering.\n        // We don't know if onChange is going to want to cause paints\n        // (it's also how we debounce, under the assumption that \"paste\" behavior\n        //  would be fast enough to be quicker than individual frames\n        //   (see logic in autoAdvance)\n        //  )\n        this.#frame = requestAnimationFrame(()=>{\n            waiter.endAsync(this.#token);\n            if (isDestroyed(this) || isDestroying(this)) return;\n            if (!this.args.onChange) return;\n            let value1 = getCollectiveValue(event1.target, this.length);\n            if (value1 === undefined) {\n                warn(`Value could not be determined for the OTP field. was it removed from the DOM?`, {\n                    id: 'ember-primitives.OTPInput.missing-value'\n                });\n                return;\n            }\n            this.args.onChange({\n                code: value1,\n                complete: value1.length === this.length\n            }, event1);\n        });\n    };\n    #token: unknown | undefined;\n    #frame: number | undefined;\n    get length() {\n        return this.args.length ?? DEFAULT_LENGTH;\n    }\n    get fields() {\n        // We only need to iterate a number of times,\n        // so we don't care about the actual value or\n        // referential integrity here\n        return new Array(this.length);\n    }\n    static{\n        template(`\n    <fieldset ...attributes>\n      {{#let\n        (component Fields fields=this.fields handleChange=this.handleChange labelFn=@labelFn)\n        as |CurriedFields|\n      }}\n        {{#if (has-block)}}\n          {{yield CurriedFields}}\n        {{else}}\n          <CurriedFields />\n        {{/if}}\n      {{/let}}\n\n      <style>\n        .ember-primitives__sr-only { position: absolute; width: 1px; height: 1px; padding: 0;\n        margin: -1px; overflow: hidden; clip: rect(0, 0, 0, 0); white-space: nowrap; border-width:\n        0; }\n      </style>\n    </fieldset>\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2VtYmVyLXByaW1pdGl2ZXMvZW1iZXItcHJpbWl0aXZlcy9lbWJlci1wcmltaXRpdmVzL3NyYy9jb21wb25lbnRzL29uZS10aW1lLXBhc3N3b3JkL2lucHV0Lmd0cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29tcG9uZW50IGZyb20gJ0BnbGltbWVyL2NvbXBvbmVudCc7XG5pbXBvcnQgeyB3YXJuIH0gZnJvbSAnQGVtYmVyL2RlYnVnJztcbmltcG9ydCB7IGlzRGVzdHJveWVkLCBpc0Rlc3Ryb3lpbmcgfSBmcm9tICdAZW1iZXIvZGVzdHJveWFibGUnO1xuaW1wb3J0IHsgb24gfSBmcm9tICdAZW1iZXIvbW9kaWZpZXInO1xuaW1wb3J0IHsgYnVpbGRXYWl0ZXIgfSBmcm9tICdAZW1iZXIvdGVzdC13YWl0ZXJzJztcblxuaW1wb3J0IHtcbiAgYXV0b0FkdmFuY2UsXG4gIGdldENvbGxlY3RpdmVWYWx1ZSxcbiAgaGFuZGxlTmF2aWdhdGlvbixcbiAgaGFuZGxlUGFzdGUsXG4gIHNlbGVjdEFsbCxcbn0gZnJvbSAnLi91dGlscy50cyc7XG5cbmltcG9ydCB0eXBlIHsgVE9DIH0gZnJvbSAnQGVtYmVyL2NvbXBvbmVudC90ZW1wbGF0ZS1vbmx5JztcbmltcG9ydCB0eXBlIHsgV2l0aEJvdW5kQXJncyB9IGZyb20gJ0BnbGludC90ZW1wbGF0ZSc7XG5cbmNvbnN0IERFRkFVTFRfTEVOR1RIID0gNjtcblxuZnVuY3Rpb24gbGFiZWxGb3IoaW5wdXRJbmRleDogbnVtYmVyLCBsYWJlbEZuOiB1bmRlZmluZWQgfCAoKGluZGV4OiBudW1iZXIpID0-IHN0cmluZykpIHtcbiAgaWYgKGxhYmVsRm4pIHtcbiAgICByZXR1cm4gbGFiZWxGbihpbnB1dEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiBgUGxlYXNlIGVudGVyIE9UUCBjaGFyYWN0ZXIgJHtpbnB1dEluZGV4ICsgMX1gO1xufVxuXG5sZXQgd2FpdGVyID0gYnVpbGRXYWl0ZXIoJ2VtYmVyLXByaW1pdGl2ZXM6T1RQSW5wdXQ6aGFuZGxlQ2hhbmdlJyk7XG5cbmNvbnN0IEZpZWxkczogVE9DPHtcbiAgLyoqXG4gICAqIEFueSBhdHRyaWJ1dGVzIHBhc3NlZCB0byB0aGlzIGNvbXBvbmVudCB3aWxsIGJlIGFwcGxpZWQgdG8gZWFjaCBpbnB1dC5cbiAgICovXG4gIEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gIEFyZ3M6IHtcbiAgICBmaWVsZHM6IHVua25vd25bXTtcbiAgICBsYWJlbEZuOiAoaW5kZXg6IG51bWJlcikgPT4gc3RyaW5nO1xuICAgIGhhbmRsZUNoYW5nZTogKGV2ZW50OiBFdmVudCkgPT4gdm9pZDtcbiAgfTtcbn0-ID0gPHRlbXBsYXRlPlxuICB7eyNlYWNoIEBmaWVsZHMgYXMgfF9maWVsZCBpfH19XG4gICAgPGxhYmVsPlxuICAgICAgPHNwYW4gY2xhc3M9XCJlbWJlci1wcmltaXRpdmVzX19zci1vbmx5XCI-e3tsYWJlbEZvciBpIEBsYWJlbEZufX08L3NwYW4-XG4gICAgICA8aW5wdXRcbiAgICAgICAgbmFtZT1cImNvZGV7e2l9fVwiXG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgaW5wdXRtb2RlPVwibnVtZXJpY1wiXG4gICAgICAgIGF1dG9jb21wbGV0ZT1cIm9mZlwiXG4gICAgICAgIC4uLmF0dHJpYnV0ZXNcbiAgICAgICAge3tvbiBcImNsaWNrXCIgc2VsZWN0QWxsfX1cbiAgICAgICAge3tvbiBcInBhc3RlXCIgaGFuZGxlUGFzdGV9fVxuICAgICAgICB7e29uIFwiaW5wdXRcIiBhdXRvQWR2YW5jZX19XG4gICAgICAgIHt7b24gXCJpbnB1dFwiIEBoYW5kbGVDaGFuZ2V9fVxuICAgICAgICB7e29uIFwia2V5ZG93blwiIGhhbmRsZU5hdmlnYXRpb259fVxuICAgICAgLz5cbiAgICA8L2xhYmVsPlxuICB7ey9lYWNofX1cbjwvdGVtcGxhdGU-O1xuXG5leHBvcnQgY2xhc3MgT1RQSW5wdXQgZXh0ZW5kcyBDb21wb25lbnQ8e1xuICAvKipcbiAgICogVGhlIGNvbGxlY3Rpb24gb2YgaW5kaXZpZHVhbCBPVFAgaW5wdXRzIGFyZSBjb250YWluZWQgYnkgYSBmaWVsZHNldC5cbiAgICogQXBwbHlpbmcgdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlIHRvIHRoaXMgZmllbGRzZXQgd2lsbCBkaXNhYmxlXG4gICAqIGFsbCBvZiB0aGUgaW5wdXRzLCBpZiB0aGF0J3MgZGVzaXJlZC5cbiAgICovXG4gIEVsZW1lbnQ6IEhUTUxGaWVsZFNldEVsZW1lbnQ7XG4gIEFyZ3M6IHtcbiAgICAvKipcbiAgICAgKiBIb3cgbWFueSBjaGFyYWN0ZXJzIHRoZSBvbmUtdGltZS1wYXNzd29yZCBmaWVsZCBzaG91bGQgYmVcbiAgICAgKiBEZWZhdWx0cyB0byA2XG4gICAgICovXG4gICAgbGVuZ3RoPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVG8gQ3VzdG9taXplIHRoZSBsYWJlbCBvZiB0aGUgaW5wdXQgZmllbGRzLCB5b3UgbWF5IHBhc3MgYSBmdW5jdGlvbi5cbiAgICAgKiBCeSBkZWZhdWx0LCB0aGlzIGlzIGBQbGVhc2UgZW50ZXIgT1RQIGNoYXJhY3RlciAke2luZGV4ICsgMX1gLlxuICAgICAqL1xuICAgIGxhYmVsRm4_OiAoaW5kZXg6IG51bWJlcikgPT4gc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogSWYgcGFzc2VkLCB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIDxJbnB1dD4gY2hhbmdlcy5cbiAgICAgKiBBbGwgZmllbGRzIGFyZSBjb25zaWRlcmVkIG9uZSBpbnB1dC5cbiAgICAgKi9cbiAgICBvbkNoYW5nZT86IChcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0ZXh0IGZyb20gdGhlIGNvbGxlY3RpdmUgYDxJbnB1dD5gXG4gICAgICAgICAqXG4gICAgICAgICAqIGBjb2RlYCBfbWF5XyBiZSBzaG9ydGVyIHRoYW4gYGxlbmd0aGBcbiAgICAgICAgICogaWYgdGhlIHVzZXIgaGFzIG5vdCBmaW5pc2hlZCB0eXBpbmcgLyBwYXN0aW5nIHRoZWlyIGNvZGVcbiAgICAgICAgICovXG4gICAgICAgIGNvZGU6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHdpbGwgYmUgYHRydWVgIGlmIGBjb2RlYCdzIGxlbmd0aCBtYXRjaGVzIHRoZSBwYXNzZWQgYEBsZW5ndGhgIG9yIHRoZSBkZWZhdWx0IG9mIDZcbiAgICAgICAgICovXG4gICAgICAgIGNvbXBsZXRlOiBib29sZWFuO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGxhc3QgaW5wdXQgZXZlbnQgcmVjZWl2ZWRcbiAgICAgICAqL1xuICAgICAgZXZlbnQ6IEV2ZW50XG4gICAgKSA9PiB2b2lkO1xuICB9O1xuICBCbG9ja3M6IHtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbGx5LCB5b3UgbWF5IGNvbnRyb2wgaG93IHRoZSBGaWVsZHMgYXJlIHJlbmRlcmVkLCB3aXRoIHByb2NlZWRpbmcgdGV4dCxcbiAgICAgKiBhZGRpdGlvbmFsIGF0dHJpYnV0ZXMgYWRkZWQsIGV0Yy5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgaG93IHlvdSBjYW4gYWRkIGN1c3RvbSB2YWxpZGF0aW9uIHRvIGVhY2ggaW5wdXQgZmllbGQuXG4gICAgICovXG4gICAgZGVmYXVsdD86IFtmaWVsZHM6IFdpdGhCb3VuZEFyZ3M8dHlwZW9mIEZpZWxkcywgJ2ZpZWxkcycgfCAnaGFuZGxlQ2hhbmdlJyB8ICdsYWJlbEZuJz5dO1xuICB9O1xufT4ge1xuICAvKipcbiAgICogVGhpcyBpcyBkZWJvdW5jZWQsIGJlY2F1c2Ugd2UgYmluZCB0byBlYWNoIGlucHV0LFxuICAgKiBidXQgb25seSB3YW50IHRvIGVtaXQgb25lIGNoYW5nZSBldmVudCBpZiBzb21lb25lIHBhc3Rlc1xuICAgKiBtdWx0aXBsZSBjaGFyYWN0ZXJzXG4gICAqL1xuICBoYW5kbGVDaGFuZ2UgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgaWYgKCF0aGlzLmFyZ3Mub25DaGFuZ2UpIHJldHVybjtcblxuICAgIGlmICghdGhpcy4jdG9rZW4pIHtcbiAgICAgIHRoaXMuI3Rva2VuID0gd2FpdGVyLmJlZ2luQXN5bmMoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy4jZnJhbWUpIHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuI2ZyYW1lKTtcbiAgICB9XG5cbiAgICAvLyBXZSAgdXNlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB0byBiZSBmcmllbmRseSB0byByZW5kZXJpbmcuXG4gICAgLy8gV2UgZG9uJ3Qga25vdyBpZiBvbkNoYW5nZSBpcyBnb2luZyB0byB3YW50IHRvIGNhdXNlIHBhaW50c1xuICAgIC8vIChpdCdzIGFsc28gaG93IHdlIGRlYm91bmNlLCB1bmRlciB0aGUgYXNzdW1wdGlvbiB0aGF0IFwicGFzdGVcIiBiZWhhdmlvclxuICAgIC8vICB3b3VsZCBiZSBmYXN0IGVub3VnaCB0byBiZSBxdWlja2VyIHRoYW4gaW5kaXZpZHVhbCBmcmFtZXNcbiAgICAvLyAgIChzZWUgbG9naWMgaW4gYXV0b0FkdmFuY2UpXG4gICAgLy8gIClcbiAgICB0aGlzLiNmcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICB3YWl0ZXIuZW5kQXN5bmModGhpcy4jdG9rZW4pO1xuXG4gICAgICBpZiAoaXNEZXN0cm95ZWQodGhpcykgfHwgaXNEZXN0cm95aW5nKHRoaXMpKSByZXR1cm47XG4gICAgICBpZiAoIXRoaXMuYXJncy5vbkNoYW5nZSkgcmV0dXJuO1xuXG4gICAgICBsZXQgdmFsdWUgPSBnZXRDb2xsZWN0aXZlVmFsdWUoZXZlbnQudGFyZ2V0LCB0aGlzLmxlbmd0aCk7XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHdhcm4oYFZhbHVlIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkIGZvciB0aGUgT1RQIGZpZWxkLiB3YXMgaXQgcmVtb3ZlZCBmcm9tIHRoZSBET00_YCwge1xuICAgICAgICAgIGlkOiAnZW1iZXItcHJpbWl0aXZlcy5PVFBJbnB1dC5taXNzaW5nLXZhbHVlJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFyZ3Mub25DaGFuZ2UoeyBjb2RlOiB2YWx1ZSwgY29tcGxldGU6IHZhbHVlLmxlbmd0aCA9PT0gdGhpcy5sZW5ndGggfSwgZXZlbnQpO1xuICAgIH0pO1xuICB9O1xuXG4gICN0b2tlbjogdW5rbm93biB8IHVuZGVmaW5lZDtcbiAgI2ZyYW1lOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgZ2V0IGxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5hcmdzLmxlbmd0aCA_PyBERUZBVUxUX0xFTkdUSDtcbiAgfVxuXG4gIGdldCBmaWVsZHMoKSB7XG4gICAgLy8gV2Ugb25seSBuZWVkIHRvIGl0ZXJhdGUgYSBudW1iZXIgb2YgdGltZXMsXG4gICAgLy8gc28gd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGUgYWN0dWFsIHZhbHVlIG9yXG4gICAgLy8gcmVmZXJlbnRpYWwgaW50ZWdyaXR5IGhlcmVcbiAgICByZXR1cm4gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgfVxuXG4gIDx0ZW1wbGF0ZT5cbiAgICA8ZmllbGRzZXQgLi4uYXR0cmlidXRlcz5cbiAgICAgIHt7I2xldFxuICAgICAgICAoY29tcG9uZW50IEZpZWxkcyBmaWVsZHM9dGhpcy5maWVsZHMgaGFuZGxlQ2hhbmdlPXRoaXMuaGFuZGxlQ2hhbmdlIGxhYmVsRm49QGxhYmVsRm4pXG4gICAgICAgIGFzIHxDdXJyaWVkRmllbGRzfFxuICAgICAgfX1cbiAgICAgICAge3sjaWYgKGhhcy1ibG9jayl9fVxuICAgICAgICAgIHt7eWllbGQgQ3VycmllZEZpZWxkc319XG4gICAgICAgIHt7ZWxzZX19XG4gICAgICAgICAgPEN1cnJpZWRGaWVsZHMgLz5cbiAgICAgICAge3svaWZ9fVxuICAgICAge3svbGV0fX1cblxuICAgICAgPHN0eWxlPlxuICAgICAgICAuZW1iZXItcHJpbWl0aXZlc19fc3Itb25seSB7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgd2lkdGg6IDFweDsgaGVpZ2h0OiAxcHg7IHBhZGRpbmc6IDA7XG4gICAgICAgIG1hcmdpbjogLTFweDsgb3ZlcmZsb3c6IGhpZGRlbjsgY2xpcDogcmVjdCgwLCAwLCAwLCAwKTsgd2hpdGUtc3BhY2U6IG5vd3JhcDsgYm9yZGVyLXdpZHRoOlxuICAgICAgICAwOyB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZmllbGRzZXQ-XG4gIDwvdGVtcGxhdGU-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"],"names":["DEFAULT_LENGTH","labelFor","inputIndex1","labelFn1","waiter","buildWaiter","Fields","precompileTemplate","scope","on","selectAll","handlePaste","autoAdvance","handleNavigation","strictMode","templateOnly","OTPInput","Component","handleChange","event1","args","onChange","beginAsync","cancelAnimationFrame","requestAnimationFrame","endAsync","isDestroyed","isDestroying","value1","getCollectiveValue","target","length","undefined","warn","id","code","complete","fields","Array","setComponentTemplate"],"mappings":";;;;;;;;;;AAiBA,MAAMA,cAAA,GAAiB,CAAA,CAAA;AAEvB,SAASC,QAAAA,CAASC,WAAkB,EAAEC,QAAgD,EAAA;AACpF,EAAA,IAAIA,QAAA,EAAS;IACX,OAAOA,QAAA,CAAQD,WAAA,CAAA,CAAA;AACjB,GAAA;AAEA,EAAA,OAAQ,CAA6BA,2BAAAA,EAAAA,WAAA,GAAa,CAAE,CAAC,CAAA,CAAA;AACvD,CAAA;AAEA,IAAIE,MAAA,GAASC,WAAA,CAAY,wCAAA,CAAA,CAAA;AAEzB,MAAMC,SAUDC,oBAAAA,CAAAA,kBAAA,CAkBL,kaAAA,EAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAP,QAAA;IAAAQ,EAAA;IAAAC,SAAA;IAAAC,WAAA;IAAAC,WAAA;AAAAC,IAAAA,gBAAAA;AAAA,GAAA,CAAA;EAAAC,UAAA,EAAA,IAAA;AAAU,CAAA,CAAA,EAAAC,YAAA,EAAA,CAAA,CAAA;AAEH,MAAMC,QAAA,SAAiBC,SAAA;AAsD5B;;;;;AAKAC,EAAAA,YAAA,GAAgBC,MAAO,IAAA;AACrB,IAAA,IAAI,CAAC,IAAI,CAACC,IAAI,CAACC,QAAQ,EAAE,OAAA;AAEzB,IAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AAChB,MAAA,IAAI,CAAC,MAAM,GAAGjB,MAAA,CAAOkB,UAAU,EAAA,CAAA;AACjC,KAAA;AAEA,IAAA,IAAI,IAAI,CAAC,MAAM,EAAE;AACfC,MAAAA,oBAAA,CAAqB,IAAI,CAAC,MAAM,CAAA,CAAA;AAClC,KAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,IAAI,CAAC,MAAM,GAAGC,qBAAA,CAAsB,MAAA;AAClCpB,MAAAA,MAAA,CAAOqB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAA,CAAA;AAE3B,MAAA,IAAIC,WAAA,CAAY,IAAI,KAAKC,YAAA,CAAa,IAAI,CAAG,EAAA,OAAA;AAC7C,MAAA,IAAI,CAAC,IAAI,CAACP,IAAI,CAACC,QAAQ,EAAE,OAAA;MAEzB,IAAIO,MAAA,GAAQC,kBAAA,CAAmBV,MAAA,CAAMW,MAAM,EAAE,IAAI,CAACC,MAAM,CAAA,CAAA;MAExD,IAAIH,MAAA,KAAUI,SAAA,EAAW;QACvBC,IAAA,CAAM,+EAA8E,EAAE;AACpFC,UAAAA,EAAA,EAAI,yCAAA;AACN,SAAA,CAAA,CAAA;AAEA,QAAA,OAAA;AACF,OAAA;AAEA,MAAA,IAAI,CAACd,IAAI,CAACC,QAAQ,CAAC;AAAEc,QAAAA,IAAA,EAAMP,MAAA;AAAOQ,QAAAA,QAAA,EAAUR,MAAA,CAAMG,MAAM,KAAK,IAAI,CAACA,MAAAA;AAAO,OAAA,EAAGZ,MAAA,CAAA,CAAA;AAC9E,KAAA,CAAA,CAAA;AACF,GAAA,CAAA;AAEA,EAAA,MAAM,CAAA;AACN,EAAA,MAAM,CAAA;AAEN,EAAA,IAAIY,SAAS;AACX,IAAA,OAAO,IAAI,CAACX,IAAI,CAACW,MAAM,IAAI/B,cAAA,CAAA;AAC7B,GAAA;AAEA,EAAA,IAAIqC,SAAS;AACX;AACA;AACA;AACA,IAAA,OAAO,IAAIC,KAAA,CAAM,IAAI,CAACP,MAAM,CAAA,CAAA;AAC9B,GAAA;AAEA,EAAA;IAAAQ,oBAAA,CAAAhC,kBAAA,CAmBA,gjBAAA,EAAA;AAAAC,MAAAA,KAAA,EAAAA,OAAA;AAAAF,QAAAA,MAAAA;AAAA,OAAA,CAAA;MAAAQ,UAAA,EAAA,IAAA;AAAU,KAAA,CAAA,EAAV,IAAW,CAAA,CAAA;AAAD,GAAA;AACZ;;;;"}