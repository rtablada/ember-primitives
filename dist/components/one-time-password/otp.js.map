{"version":3,"file":"otp.js","sources":["../../../src/components/one-time-password/otp.gts"],"sourcesContent":["import { template } from \"@ember/template-compiler\";\nimport { assert } from '@ember/debug';\nimport { fn, hash } from '@ember/helper';\nimport { on } from '@ember/modifier';\nimport { buildWaiter } from '@ember/test-waiters';\nimport { Reset, Submit } from './buttons.gts';\nimport { OTPInput } from './input.gts';\nimport type { TOC } from '@ember/component/template-only';\nimport type { WithBoundArgs } from '@glint/template';\nlet waiter = buildWaiter('ember-primitives:OTP:handleAutoSubmitAttempt');\nconst handleFormSubmit = (submit1: (data: {\n    code: string;\n}) => void, event1: SubmitEvent)=>{\n    event1.preventDefault();\n    assert('[BUG]: handleFormSubmit was not attached to a form. Please open an issue.', event1.currentTarget instanceof HTMLFormElement);\n    let formData1 = new FormData(event1.currentTarget);\n    let code1 = '';\n    for (let [key1, value1] of formData1.entries()){\n        if (key1.startsWith('code')) {\n            code1 += value1;\n        }\n    }\n    submit1({\n        code: code1\n    });\n};\nfunction handleChange(autoSubmit1: boolean | undefined, data1: {\n    code: string;\n    complete: boolean;\n}, event1: Event) {\n    if (!autoSubmit1) return;\n    if (!data1.complete) return;\n    assert('[BUG]: event target is not a known element type', event1.target instanceof HTMLElement || event1.target instanceof SVGElement);\n    const form1 = event1.target.closest('form');\n    assert('[BUG]: Cannot handle event when <OTP> Inputs are not rendered within their <form>', form1);\n    const token1 = waiter.beginAsync();\n    let finished1 = ()=>{\n        waiter.endAsync(token1);\n        form1.removeEventListener('submit', finished1);\n    };\n    form1.addEventListener('submit', finished1);\n    // NOTE: when calling .submit() the submit event handlers are not run\n    form1.requestSubmit();\n}\nexport const OTP: TOC<{\n    /**\n   * The overall OTP Input is in its own form.\n   * Modern UI/UX Patterns usually have this sort of field\n   * as its own page, thus within its own form.\n   *\n   * By default, only the 'submit' event is bound, and is\n   * what calls the `@onSubmit` argument.\n   */ Element: HTMLFormElement;\n    Args: {\n        /**\n     * How many characters the one-time-password field should be\n     * Defaults to 6\n     */ length?: number;\n        /**\n     * The on submit callback will give you the entered\n     * one-time-password code.\n     *\n     * It will be called when the user manually clicks the 'submit'\n     * button or when the full code is pasted and meats the validation\n     * criteria.\n     */ onSubmit: (data: {\n            code: string;\n        }) => void;\n        /**\n     * Whether or not to auto-submit after the code has been pasted\n     * in to the collective \"field\".  Default is true\n     */ autoSubmit?: boolean;\n    };\n    Blocks: {\n        default: [{\n                /**\n         * The collective input field that the OTP code will be typed/pasted in to\n         */ Input: WithBoundArgs<typeof OTPInput, 'length' | 'onChange'>;\n                /**\n         * Button with `type=\"submit\"` to submit the form\n         */ Submit: typeof Submit;\n                /**\n         * Pre-wired button to reset the form\n         */ Reset: typeof Reset;\n            }];\n    };\n}> = template(`\n  <form {{on \"submit\" (fn handleFormSubmit @onSubmit)}} ...attributes>\n    {{yield\n      (hash\n        Input=(component\n          OTPInput length=@length onChange=(if @autoSubmit (fn handleChange @autoSubmit))\n        )\n        Submit=Submit\n        Reset=Reset\n      )\n    }}\n  </form>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2VtYmVyLXByaW1pdGl2ZXMvZW1iZXItcHJpbWl0aXZlcy9lbWJlci1wcmltaXRpdmVzL3NyYy9jb21wb25lbnRzL29uZS10aW1lLXBhc3N3b3JkL290cC5ndHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnQGVtYmVyL2RlYnVnJztcbmltcG9ydCB7IGZuLCBoYXNoIH0gZnJvbSAnQGVtYmVyL2hlbHBlcic7XG5pbXBvcnQgeyBvbiB9IGZyb20gJ0BlbWJlci9tb2RpZmllcic7XG5pbXBvcnQgeyBidWlsZFdhaXRlciB9IGZyb20gJ0BlbWJlci90ZXN0LXdhaXRlcnMnO1xuXG5pbXBvcnQgeyBSZXNldCwgU3VibWl0IH0gZnJvbSAnLi9idXR0b25zLmd0cyc7XG5pbXBvcnQgeyBPVFBJbnB1dCB9IGZyb20gJy4vaW5wdXQuZ3RzJztcblxuaW1wb3J0IHR5cGUgeyBUT0MgfSBmcm9tICdAZW1iZXIvY29tcG9uZW50L3RlbXBsYXRlLW9ubHknO1xuaW1wb3J0IHR5cGUgeyBXaXRoQm91bmRBcmdzIH0gZnJvbSAnQGdsaW50L3RlbXBsYXRlJztcblxubGV0IHdhaXRlciA9IGJ1aWxkV2FpdGVyKCdlbWJlci1wcmltaXRpdmVzOk9UUDpoYW5kbGVBdXRvU3VibWl0QXR0ZW1wdCcpO1xuXG5jb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKHN1Ym1pdDogKGRhdGE6IHsgY29kZTogc3RyaW5nIH0pID0-IHZvaWQsIGV2ZW50OiBTdWJtaXRFdmVudCkgPT4ge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gIGFzc2VydChcbiAgICAnW0JVR106IGhhbmRsZUZvcm1TdWJtaXQgd2FzIG5vdCBhdHRhY2hlZCB0byBhIGZvcm0uIFBsZWFzZSBvcGVuIGFuIGlzc3VlLicsXG4gICAgZXZlbnQuY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIEhUTUxGb3JtRWxlbWVudFxuICApO1xuXG4gIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShldmVudC5jdXJyZW50VGFyZ2V0KTtcblxuICBsZXQgY29kZSA9ICcnO1xuXG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpIHtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ2NvZGUnKSkge1xuICAgICAgY29kZSArPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBzdWJtaXQoe1xuICAgIGNvZGUsXG4gIH0pO1xufTtcblxuZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKFxuICBhdXRvU3VibWl0OiBib29sZWFuIHwgdW5kZWZpbmVkLFxuICBkYXRhOiB7IGNvZGU6IHN0cmluZzsgY29tcGxldGU6IGJvb2xlYW4gfSxcbiAgZXZlbnQ6IEV2ZW50XG4pIHtcbiAgaWYgKCFhdXRvU3VibWl0KSByZXR1cm47XG4gIGlmICghZGF0YS5jb21wbGV0ZSkgcmV0dXJuO1xuXG4gIGFzc2VydChcbiAgICAnW0JVR106IGV2ZW50IHRhcmdldCBpcyBub3QgYSBrbm93biBlbGVtZW50IHR5cGUnLFxuICAgIGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIFNWR0VsZW1lbnRcbiAgKTtcblxuICBjb25zdCBmb3JtID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJ2Zvcm0nKTtcblxuICBhc3NlcnQoJ1tCVUddOiBDYW5ub3QgaGFuZGxlIGV2ZW50IHdoZW4gPE9UUD4gSW5wdXRzIGFyZSBub3QgcmVuZGVyZWQgd2l0aGluIHRoZWlyIDxmb3JtPicsIGZvcm0pO1xuXG4gIGNvbnN0IHRva2VuID0gd2FpdGVyLmJlZ2luQXN5bmMoKTtcbiAgbGV0IGZpbmlzaGVkID0gKCkgPT4ge1xuICAgIHdhaXRlci5lbmRBc3luYyh0b2tlbik7XG4gICAgZm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmaW5pc2hlZCk7XG4gIH07XG5cbiAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmaW5pc2hlZCk7XG5cbiAgLy8gTk9URTogd2hlbiBjYWxsaW5nIC5zdWJtaXQoKSB0aGUgc3VibWl0IGV2ZW50IGhhbmRsZXJzIGFyZSBub3QgcnVuXG4gIGZvcm0ucmVxdWVzdFN1Ym1pdCgpO1xufVxuXG5leHBvcnQgY29uc3QgT1RQOiBUT0M8e1xuICAvKipcbiAgICogVGhlIG92ZXJhbGwgT1RQIElucHV0IGlzIGluIGl0cyBvd24gZm9ybS5cbiAgICogTW9kZXJuIFVJL1VYIFBhdHRlcm5zIHVzdWFsbHkgaGF2ZSB0aGlzIHNvcnQgb2YgZmllbGRcbiAgICogYXMgaXRzIG93biBwYWdlLCB0aHVzIHdpdGhpbiBpdHMgb3duIGZvcm0uXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIG9ubHkgdGhlICdzdWJtaXQnIGV2ZW50IGlzIGJvdW5kLCBhbmQgaXNcbiAgICogd2hhdCBjYWxscyB0aGUgYEBvblN1Ym1pdGAgYXJndW1lbnQuXG4gICAqL1xuICBFbGVtZW50OiBIVE1MRm9ybUVsZW1lbnQ7XG4gIEFyZ3M6IHtcbiAgICAvKipcbiAgICAgKiBIb3cgbWFueSBjaGFyYWN0ZXJzIHRoZSBvbmUtdGltZS1wYXNzd29yZCBmaWVsZCBzaG91bGQgYmVcbiAgICAgKiBEZWZhdWx0cyB0byA2XG4gICAgICovXG4gICAgbGVuZ3RoPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9uIHN1Ym1pdCBjYWxsYmFjayB3aWxsIGdpdmUgeW91IHRoZSBlbnRlcmVkXG4gICAgICogb25lLXRpbWUtcGFzc3dvcmQgY29kZS5cbiAgICAgKlxuICAgICAqIEl0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIHVzZXIgbWFudWFsbHkgY2xpY2tzIHRoZSAnc3VibWl0J1xuICAgICAqIGJ1dHRvbiBvciB3aGVuIHRoZSBmdWxsIGNvZGUgaXMgcGFzdGVkIGFuZCBtZWF0cyB0aGUgdmFsaWRhdGlvblxuICAgICAqIGNyaXRlcmlhLlxuICAgICAqL1xuICAgIG9uU3VibWl0OiAoZGF0YTogeyBjb2RlOiBzdHJpbmcgfSkgPT4gdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRvIGF1dG8tc3VibWl0IGFmdGVyIHRoZSBjb2RlIGhhcyBiZWVuIHBhc3RlZFxuICAgICAqIGluIHRvIHRoZSBjb2xsZWN0aXZlIFwiZmllbGRcIi4gIERlZmF1bHQgaXMgdHJ1ZVxuICAgICAqL1xuICAgIGF1dG9TdWJtaXQ_OiBib29sZWFuO1xuICB9O1xuICBCbG9ja3M6IHtcbiAgICBkZWZhdWx0OiBbXG4gICAgICB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY29sbGVjdGl2ZSBpbnB1dCBmaWVsZCB0aGF0IHRoZSBPVFAgY29kZSB3aWxsIGJlIHR5cGVkL3Bhc3RlZCBpbiB0b1xuICAgICAgICAgKi9cbiAgICAgICAgSW5wdXQ6IFdpdGhCb3VuZEFyZ3M8dHlwZW9mIE9UUElucHV0LCAnbGVuZ3RoJyB8ICdvbkNoYW5nZSc-O1xuICAgICAgICAvKipcbiAgICAgICAgICogQnV0dG9uIHdpdGggYHR5cGU9XCJzdWJtaXRcImAgdG8gc3VibWl0IHRoZSBmb3JtXG4gICAgICAgICAqL1xuICAgICAgICBTdWJtaXQ6IHR5cGVvZiBTdWJtaXQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcmUtd2lyZWQgYnV0dG9uIHRvIHJlc2V0IHRoZSBmb3JtXG4gICAgICAgICAqL1xuICAgICAgICBSZXNldDogdHlwZW9mIFJlc2V0O1xuICAgICAgfSxcbiAgICBdO1xuICB9O1xufT4gPSA8dGVtcGxhdGU-XG4gIDxmb3JtIHt7b24gXCJzdWJtaXRcIiAoZm4gaGFuZGxlRm9ybVN1Ym1pdCBAb25TdWJtaXQpfX0gLi4uYXR0cmlidXRlcz5cbiAgICB7e3lpZWxkXG4gICAgICAoaGFzaFxuICAgICAgICBJbnB1dD0oY29tcG9uZW50XG4gICAgICAgICAgT1RQSW5wdXQgbGVuZ3RoPUBsZW5ndGggb25DaGFuZ2U9KGlmIEBhdXRvU3VibWl0IChmbiBoYW5kbGVDaGFuZ2UgQGF1dG9TdWJtaXQpKVxuICAgICAgICApXG4gICAgICAgIFN1Ym1pdD1TdWJtaXRcbiAgICAgICAgUmVzZXQ9UmVzZXRcbiAgICAgIClcbiAgICB9fVxuICA8L2Zvcm0-XG48L3RlbXBsYXRlPjtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsU0FBUyxNQUFNLFFBQVEsZUFBZTtBQUN0QyxTQUFTLEVBQUUsRUFBRSxJQUFJLFFBQVEsZ0JBQWdCO0FBQ3pDLFNBQVMsRUFBRSxRQUFRLGtCQUFrQjtBQUNyQyxTQUFTLFdBQVcsUUFBUSxzQkFBc0I7QUFFbEQsU0FBUyxLQUFLLEVBQUUsTUFBTSxRQUFRLGdCQUFnQjtBQUM5QyxTQUFTLFFBQVEsUUFBUSxjQUFjO0FBRXZDLGNBQWMsR0FBRyxRQUFRLGlDQUFpQztBQUMxRCxjQUFjLGFBQWEsUUFBUSxrQkFBa0I7QUFFckQsSUFBSSxTQUFTLFlBQVk7QUFFekIsTUFBTSxtQkFBbUIsQ0FBQyxVQUFTO0lBQVEsTUFBTSxNQUFNO01BQU8sSUFBSSxFQUFFLFFBQU87SUFDekUsT0FBTSxjQUFjO0lBRXBCLE9BQ0UsNkVBQ0EsT0FBTSxhQUFhLFlBQVk7SUFHakMsSUFBSSxZQUFXLElBQUksU0FBUyxPQUFNLGFBQWE7SUFFL0MsSUFBSSxRQUFPO0lBRVgsS0FBSyxJQUFJLENBQUMsTUFBSyxPQUFNLElBQUksVUFBUyxPQUFPLEdBQUk7UUFDM0MsSUFBSSxLQUFJLFVBQVUsQ0FBQyxTQUFTO1lBQzFCLFNBQVE7UUFDVjtJQUNGO0lBRUEsUUFBTztRQUNMLE1BQUE7SUFDRjtBQUNGO0FBRUEsU0FBUyxhQUNQLGFBQVksT0FBTyxHQUFHLFNBQVMsRUFDL0I7SUFBUSxNQUFNLE1BQU07SUFBRSxVQUFVLE9BQU87Q0FBRSxFQUN6QyxRQUFPLEtBQUs7SUFFWixJQUFJLENBQUMsYUFBWTtJQUNqQixJQUFJLENBQUMsTUFBSyxRQUFRLEVBQUU7SUFFcEIsT0FDRSxtREFDQSxPQUFNLE1BQU0sWUFBWSxlQUFlLE9BQU0sTUFBTSxZQUFZO0lBR2pFLE1BQU0sUUFBTyxPQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFFbEMsT0FBTyxxRkFBcUY7SUFFNUYsTUFBTSxTQUFRLE9BQU8sVUFBVTtJQUMvQixJQUFJLFlBQVc7UUFDYixPQUFPLFFBQVEsQ0FBQztRQUNoQixNQUFLLG1CQUFtQixDQUFDLFVBQVU7SUFDckM7SUFFQSxNQUFLLGdCQUFnQixDQUFDLFVBQVU7SUFFaEMscUVBQXFFO0lBQ3JFLE1BQUssYUFBYTtBQUNwQjtBQUVBLE9BQU8sTUFBTSxLQUFLO0lBQ2hCOzs7Ozs7O0dBT0MsR0FDRCxTQUFTO0lBQ1Q7UUFDRTs7O0tBR0MsR0FDRCxTQUFTLE1BQU07UUFFZjs7Ozs7OztLQU9DLEdBQ0QsV0FBVztZQUFRLE1BQU0sTUFBTTtjQUFPLElBQUk7UUFFMUM7OztLQUdDLEdBQ0QsYUFBYSxPQUFPOztJQUV0QjtRQUNFO2dCQUVJOztTQUVDLEdBQ0QsT0FBTyxxQkFBcUIsVUFBVSxXQUFXO2dCQUNqRDs7U0FFQyxHQUNELGVBQWU7Z0JBQ2Y7O1NBRUMsR0FDRCxjQUFjOzs7S0FJakIsU0FBVSxDQUFBOzs7Ozs7Ozs7Ozs7QUFZZixDQUFBLEVBQUE7SUFBQTtRQUFBLE9BQUEsS0FBQSxTQUFBLENBQUEsRUFBVztJQUFEO0FBQUEsR0FBRSJ9"],"names":["waiter","buildWaiter","handleFormSubmit","submit1","event1","preventDefault","assert","currentTarget","HTMLFormElement","formData1","FormData","code1","key1","value1","entries","startsWith","code","handleChange","autoSubmit1","data1","complete","target","HTMLElement","SVGElement","form1","closest","token1","beginAsync","finished1","endAsync","removeEventListener","addEventListener","requestSubmit","OTP","precompileTemplate","scope","on","fn","hash","OTPInput","Submit","Reset","strictMode","templateOnly"],"mappings":";;;;;;;;;;AAWA,IAAIA,MAAA,GAASC,WAAA,CAAY,8CAAA,CAAA,CAAA;AAEzB,MAAMC,gBAAA,GAAmBA,CAACC,OAAwC,EAAEC,MAAO,KAAA;AACzEA,EAAAA,MAAA,CAAMC,cAAc,EAAA,CAAA;AAEpBC,EAAAA,MAAA,CACE,2EACAF,EAAAA,MAAA,CAAMG,aAAa,YAAYC,eAAA,CAAA,CAAA;AAGjC,EAAA,IAAIC,SAAA,GAAW,IAAIC,QAAA,CAASN,MAAA,CAAMG,aAAa,CAAA,CAAA;AAE/C,EAAA,IAAII,KAAA,GAAO,EAAA,CAAA;EAEX,KAAK,IAAI,CAACC,IAAA,EAAKC,MAAA,CAAM,IAAIJ,SAAA,CAASK,OAAO,EAAI,EAAA;AAC3C,IAAA,IAAIF,IAAA,CAAIG,UAAU,CAAC,MAAS,CAAA,EAAA;AAC1BJ,MAAAA,KAAA,IAAQE,MAAA,CAAA;AACV,KAAA;AACF,GAAA;AAEAV,EAAAA,OAAA,CAAO;AACLa,IAAAA,IAAA,EAAAL,KAAAA;AACF,GAAA,CAAA,CAAA;AACF,CAAA,CAAA;AAEA,SAASM,YACPC,CAAAA,WAA+B,EAC/BC,KAAyC,EACzCf,MAAY,EAAA;EAEZ,IAAI,CAACc,WAAA,EAAY,OAAA;AACjB,EAAA,IAAI,CAACC,KAAA,CAAKC,QAAQ,EAAE,OAAA;AAEpBd,EAAAA,MAAA,CACE,iDAAA,EACAF,MAAA,CAAMiB,MAAM,YAAYC,WAAA,IAAelB,MAAA,CAAMiB,MAAM,YAAYE,UAAA,CAAA,CAAA;AAGjE,EAAA,MAAMC,KAAA,GAAOpB,MAAA,CAAMiB,MAAM,CAACI,OAAO,CAAC,MAAA,CAAA,CAAA;EAElCnB,MAAA,CAAO,qFAAqFkB,KAAA,CAAA,CAAA;AAE5F,EAAA,MAAME,MAAA,GAAQ1B,MAAA,CAAO2B,UAAU,EAAA,CAAA;EAC/B,IAAIC,SAAA,GAAWA,MAAA;IACb5B,MAAA,CAAO6B,QAAQ,CAACH,MAAA,CAAA,CAAA;AAChBF,IAAAA,KAAA,CAAKM,mBAAmB,CAAC,QAAA,EAAUF,SAAA,CAAA,CAAA;AACrC,GAAA,CAAA;AAEAJ,EAAAA,KAAA,CAAKO,gBAAgB,CAAC,QAAA,EAAUH,SAAA,CAAA,CAAA;AAEhC;AACAJ,EAAAA,KAAA,CAAKQ,aAAa,EAAA,CAAA;AACpB,CAAA;AAEaC,MAAAA,MAmDRC,oBAAAA,CAAAA,kBAAA,CAYL,2OAAA,EAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAC,EAAA;IAAAC,EAAA;IAAAnC,gBAAA;IAAAoC,IAAA;IAAAC,QAAA;IAAAtB,YAAA;IAAAuB,MAAA;AAAAC,IAAAA,KAAAA;AAAA,GAAA,CAAA;EAAAC,UAAA,EAAA,IAAA;AAAU,CAAA,CAAA,EAAAC,YAAA,EAAA;;;;"}