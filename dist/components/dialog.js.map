{"version":3,"file":"dialog.js","sources":["../../src/components/dialog.gts"],"sourcesContent":["import { template } from \"@ember/template-compiler\";\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { assert } from '@ember/debug';\nimport { hash } from '@ember/helper';\nimport { on } from '@ember/modifier';\nimport { modifier } from 'ember-modifier';\n// temp\n//  https://github.com/tracked-tools/tracked-toolbox/issues/38\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { localCopy } from 'tracked-toolbox';\nimport type { TOC } from '@ember/component/template-only';\nimport type { ModifierLike, WithBoundArgs } from '@glint/template';\nconst DialogElement: TOC<{\n    Element: HTMLDialogElement;\n    Args: {\n        /**\n     * @internal\n     */ open: boolean | undefined;\n        /**\n     * @internal\n     */ onClose: () => void;\n        /**\n     * @internal\n     */ register: ModifierLike<{\n            Element: HTMLDialogElement;\n        }>;\n    };\n    Blocks: {\n        default: [];\n    };\n}> = template(`\n  <dialog ...attributes open={{@open}} {{on \"close\" @onClose}} {{@register}}>\n    {{yield}}\n  </dialog>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nexport interface Signature {\n    Args: {\n        /**\n     * Optionally set the open state of the `<dialog>`\n     * The state will still be managed internally,\n     * so this does not need to be a maintained value, but whenever it changes,\n     * the dialog element will reflect that change accordingly.\n     */ open?: boolean;\n        /**\n     * When the `<dialog>` is closed, this function will be called\n     * and the `<dialog>`'s `returnValue` will be passed.\n     *\n     * This can be used to determine which button was clicked to close the modal\n     *\n     * Note though that this value is only populated when using\n     * `<form method='dialog'>`\n     */ onClose?: (returnValue: string) => void;\n    };\n    Blocks: {\n        default: [{\n                /**\n         * Represents the open state of the `<dialog>` element.\n         */ isOpen: boolean;\n                /**\n         * Closes the `<dialog>` element\n         * Will throw an error if `Dialog` is not rendered.\n         */ close: () => void;\n                /**\n         * Opens the `<dialog>` element.\n         * Will throw an error if `Dialog` is not rendered.\n         */ open: () => void;\n                /**\n         * This is the `<dialog>` element (with some defaults pre-wired).\n         * This is required to be rendered.\n         */ Dialog: WithBoundArgs<typeof DialogElement, 'onClose' | 'register' | 'open'>;\n            }];\n    };\n}\nlet ModalDialog = class ModalDialog extends Component<Signature> {\n    static{\n        template(`\n    {{yield\n      (hash\n        isOpen=this.isOpen\n        open=this.open\n        close=this.close\n        Dialog=(component DialogElement open=@open onClose=this.handleClose register=this.register)\n      )\n    }}\n  `, {\n            component: this,\n            eval () {\n                return eval(arguments[0]);\n            }\n        });\n    }\n    @localCopy('args.open')\n    _isOpen: boolean;\n    get isOpen() {\n        /**\n     * Always fallback to false (closed)\n     */ return this._isOpen ?? false;\n    }\n    set isOpen(val1: boolean) {\n        this._isOpen = val1;\n    }\n    @tracked\n    dialogElement: HTMLDialogElement | undefined;\n    register = modifier((element1: HTMLDialogElement)=>{\n        /**\n     * This is very sad.\n     *\n     * But we need the element to be 'root state'\n     * so that when we read things like \"isOpen\",\n     * when the dialog is finally rendered, all the\n     * downstream properties render.\n     *\n     * This has to be an async / delayed a bit, so that\n     * the tracking frame can exit, and we don't infinite loop\n     */ (async ()=>{\n            await Promise.resolve();\n            this.dialogElement = element1;\n        })();\n    });\n    /**\n   * Closes the dialog -- this will throw an error in development if the dialog element was not rendered\n   */ close = ()=>{\n        assert('Cannot call `close` on <Dialog> without rendering the dialog element.', this.dialogElement);\n        /**\n     * If the element is already closed, don't run all this again\n     */ if (!this.dialogElement.hasAttribute('open')) {\n            return;\n        }\n        /**\n     * removes the `open` attribute\n     * handleClose will be called because the dialog has bound the `close` event.\n     */ this.dialogElement.close();\n    };\n    /**\n   * @internal\n   *\n   * handles the <dialog> element's native close behavior.\n   * listened to via addEventListener('close', ...);\n   */ handleClose = ()=>{\n        assert('Cannot call `handleDialogClose` on <Dialog> without rendering the dialog element. This is likely a bug in ember-primitives. Please open an issue <3', this.dialogElement);\n        this.isOpen = false;\n        this.args.onClose?.(this.dialogElement.returnValue);\n        // the return value ends up staying... which is annoying\n        this.dialogElement.returnValue = '';\n    };\n    /**\n   * Opens the dialog -- this will throw an error in development if the dialog element was not rendered\n   */ open = ()=>{\n        assert('Cannot call `open` on <Dialog> without rendering the dialog element.', this.dialogElement);\n        /**\n     * If the element is already open, don't run all this again\n     */ if (this.dialogElement.hasAttribute('open')) {\n            return;\n        }\n        /**\n     * adds the `open` attribute\n     */ this.dialogElement.showModal();\n        this.isOpen = true;\n    };\n};\nexport const Modal = ModalDialog;\nexport const Dialog = ModalDialog;\nexport default ModalDialog;\n//# sourceMappingURL=data:application/json;base64,"],"names":["DialogElement","precompileTemplate","scope","on","strictMode","templateOnly","ModalDialog","Component","setComponentTemplate","hash","g","this","prototype","localCopy","i","void 0","isOpen","_isOpen","val1","tracked","register","modifier","element1","Promise","resolve","dialogElement","close","assert","hasAttribute","handleClose","args","onClose","returnValue","open","showModal","Modal","Dialog"],"mappings":";;;;;;;;;;;;AAgBA,MAAMA,gBAkBDC,oBAAAA,CAAAA,kBAAA,CAIL,iHAAA,EAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;AAAAC,IAAAA,EAAAA;AAAA,GAAA,CAAA;EAAAC,UAAA,EAAA,IAAA;AAAU,CAAA,CAAA,EAAAC,YAAA,EAAA,CAAA,CAAA;AAiDV,IAAAC,WAAM,GAAN,MAAMA,WAAA,SAAoBC,SAAA,CAAU;AAClC,EAAA;IAAAC,oBAAA,CAAAP,kBAAA,CASA,2KAAA,EAAA;AAAAC,MAAAA,KAAA,EAAAA,OAAA;QAAAO,IAAA;AAAAT,QAAAA,aAAAA;AAAA,OAAA,CAAA;MAAAI,UAAA,EAAA,IAAA;AAAU,KAAA,CAAA,EAAV,IAAW,CAAA,CAAA;AAAD,GAAA;AATA,EAAA;AAAAM,IAAAA,CAAA,CAAAC,IAAA,CAAAC,SAAA,EAAA,SAAA,EAAA,CAWTC,SAAA,CAAU,WAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,QAAA,IAAAC,CAAA,CAAAH,IAAA,cAAAI,KAAA,CAAA,EAAA;AAEX,EAAA,IAAIC,SAAS;AACX;;;IAGA,OAAO,IAAI,CAACC,OAAO,IAAI,KAAA,CAAA;AACzB,GAAA;EACA,IAAID,MAAAA,CAAOE,IAAY,EAAE;IACvB,IAAI,CAACD,OAAO,GAAGC,IAAA,CAAA;AACjB,GAAA;AAAA,EAAA;AAAAR,IAAAA,CAAA,CAAAC,IAAA,CAAAC,SAAA,oBAECO,OAAA,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,cAAA,IAAAL,CAAA,CAAAH,IAAA,oBAAAI,KAAA,CAAA,EAAA;EAEDK,QAAA,GAAWC,QAAA,CAAUC,QAAS,IAAA;AAC5B;;;;;;;;;;;IAWA,CAAC,YAAA;MACC,MAAMC,OAAA,CAAQC,OAAO,EAAA,CAAA;MAErB,IAAI,CAACC,aAAa,GAAGH,QAAA,CAAA;KACtB,GAAA,CAAA;AACH,GAAA,CAAA,CAAA;AAEA;;;AAGAI,EAAAA,KAAA,GAAQA,MAAA;AACNC,IAAAA,MAAA,CACE,uEAAA,EACA,IAAI,CAACF,aAAa,CAAA,CAAA;AAGpB;;;AAGA,IAAA,IAAI,CAAC,IAAI,CAACA,aAAa,CAACG,YAAY,CAAC,MAAS,CAAA,EAAA;AAC5C,MAAA,OAAA;AACF,KAAA;AAEA;;;;IAIA,IAAI,CAACH,aAAa,CAACC,KAAK,EAAA,CAAA;AAC1B,GAAA,CAAA;AAEA;;;;;;AAMAG,EAAAA,WAAA,GAAcA,MAAA;AACZF,IAAAA,MAAA,CACE,qJAAA,EACA,IAAI,CAACF,aAAa,CAAA,CAAA;IAGpB,IAAI,CAACT,MAAM,GAAG,KAAA,CAAA;IACd,IAAI,CAACc,IAAI,CAACC,OAAO,GAAG,IAAI,CAACN,aAAa,CAACO,WAAW,CAAA,CAAA;AAClD;AACA,IAAA,IAAI,CAACP,aAAa,CAACO,WAAW,GAAG,EAAA,CAAA;AACnC,GAAA,CAAA;AAEA;;;AAGAC,EAAAA,IAAA,GAAOA,MAAA;AACLN,IAAAA,MAAA,CACE,sEAAA,EACA,IAAI,CAACF,aAAa,CAAA,CAAA;AAGpB;;;AAGA,IAAA,IAAI,IAAI,CAACA,aAAa,CAACG,YAAY,CAAC,MAAS,CAAA,EAAA;AAC3C,MAAA,OAAA;AACF,KAAA;AAEA;;;IAGA,IAAI,CAACH,aAAa,CAACS,SAAS,EAAA,CAAA;IAC5B,IAAI,CAAClB,MAAM,GAAG,IAAA,CAAA;AAChB,GAAA,CAAA;AACF,EAAA;AAEO,MAAMmB,KAAA,GAAQ7B,YAAA;AACd,MAAM8B,MAAA,GAAS9B;;;;"}