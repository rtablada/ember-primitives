{"version":3,"file":"portal.js","sources":["../../src/components/portal.gts"],"sourcesContent":["import { template } from \"@ember/template-compiler\";\nimport { modifier } from 'ember-modifier';\nimport { cell } from 'ember-resources';\nimport { findNearestTarget, type TARGETS } from './portal-targets.gts';\nimport type { TOC } from '@ember/component/template-only';\nexport interface Signature {\n    Args: {\n        /**\n     * The name of the PortalTarget to render in to.\n     * This is the value of the `data-portal-name` attribute\n     * of the element you wish to render in to.\n     */ to: (typeof TARGETS)[keyof typeof TARGETS] | (string & {\n        });\n    };\n    Blocks: {\n        /**\n     * The portaled content\n     */ default: [];\n    };\n}\nconst anchor = modifier((element1: Element, [to1, update1]: [string, ReturnType<typeof ElementValue>['set']])=>{\n    let found1 = findNearestTarget(element1, to1);\n    update1(found1);\n});\nconst ElementValue = ()=>cell<Element | ShadowRoot>();\nexport const Portal: TOC<Signature> = template(`\n  {{#let (ElementValue) as |target|}}\n    {{! This div is always going to be empty,\n          because it'll either find the portal and render content elsewhere,\n          it it won't find the portal and won't render anything.\n    }}\n    {{! template-lint-disable no-inline-styles }}\n    <div style=\"display:contents;\" {{anchor @to target.set}}>\n      {{#if target.current}}\n        {{#in-element target.current}}\n          {{yield}}\n        {{/in-element}}\n      {{/if}}\n    </div>\n  {{/let}}\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nexport default Portal;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2VtYmVyLXByaW1pdGl2ZXMvZW1iZXItcHJpbWl0aXZlcy9lbWJlci1wcmltaXRpdmVzL3NyYy9jb21wb25lbnRzL3BvcnRhbC5ndHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbW9kaWZpZXIgfSBmcm9tICdlbWJlci1tb2RpZmllcic7XG5pbXBvcnQgeyBjZWxsIH0gZnJvbSAnZW1iZXItcmVzb3VyY2VzJztcblxuaW1wb3J0IHsgZmluZE5lYXJlc3RUYXJnZXQsIHR5cGUgVEFSR0VUUyB9IGZyb20gJy4vcG9ydGFsLXRhcmdldHMuZ3RzJztcblxuaW1wb3J0IHR5cGUgeyBUT0MgfSBmcm9tICdAZW1iZXIvY29tcG9uZW50L3RlbXBsYXRlLW9ubHknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNpZ25hdHVyZSB7XG4gIEFyZ3M6IHtcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgUG9ydGFsVGFyZ2V0IHRvIHJlbmRlciBpbiB0by5cbiAgICAgKiBUaGlzIGlzIHRoZSB2YWx1ZSBvZiB0aGUgYGRhdGEtcG9ydGFsLW5hbWVgIGF0dHJpYnV0ZVxuICAgICAqIG9mIHRoZSBlbGVtZW50IHlvdSB3aXNoIHRvIHJlbmRlciBpbiB0by5cbiAgICAgKi9cbiAgICB0bzogKHR5cGVvZiBUQVJHRVRTKVtrZXlvZiB0eXBlb2YgVEFSR0VUU10gfCAoc3RyaW5nICYge30pO1xuICB9O1xuICBCbG9ja3M6IHtcbiAgICAvKipcbiAgICAgKiBUaGUgcG9ydGFsZWQgY29udGVudFxuICAgICAqL1xuICAgIGRlZmF1bHQ6IFtdO1xuICB9O1xufVxuXG5jb25zdCBhbmNob3IgPSBtb2RpZmllcihcbiAgKGVsZW1lbnQ6IEVsZW1lbnQsIFt0bywgdXBkYXRlXTogW3N0cmluZywgUmV0dXJuVHlwZTx0eXBlb2YgRWxlbWVudFZhbHVlPlsnc2V0J11dKSA9PiB7XG4gICAgbGV0IGZvdW5kID0gZmluZE5lYXJlc3RUYXJnZXQoZWxlbWVudCwgdG8pO1xuXG4gICAgdXBkYXRlKGZvdW5kKTtcbiAgfVxuKTtcblxuY29uc3QgRWxlbWVudFZhbHVlID0gKCkgPT4gY2VsbDxFbGVtZW50IHwgU2hhZG93Um9vdD4oKTtcblxuZXhwb3J0IGNvbnN0IFBvcnRhbDogVE9DPFNpZ25hdHVyZT4gPSA8dGVtcGxhdGU-XG4gIHt7I2xldCAoRWxlbWVudFZhbHVlKSBhcyB8dGFyZ2V0fH19XG4gICAge3shIFRoaXMgZGl2IGlzIGFsd2F5cyBnb2luZyB0byBiZSBlbXB0eSxcbiAgICAgICAgICBiZWNhdXNlIGl0J2xsIGVpdGhlciBmaW5kIHRoZSBwb3J0YWwgYW5kIHJlbmRlciBjb250ZW50IGVsc2V3aGVyZSxcbiAgICAgICAgICBpdCBpdCB3b24ndCBmaW5kIHRoZSBwb3J0YWwgYW5kIHdvbid0IHJlbmRlciBhbnl0aGluZy5cbiAgICB9fVxuICAgIHt7ISB0ZW1wbGF0ZS1saW50LWRpc2FibGUgbm8taW5saW5lLXN0eWxlcyB9fVxuICAgIDxkaXYgc3R5bGU9XCJkaXNwbGF5OmNvbnRlbnRzO1wiIHt7YW5jaG9yIEB0byB0YXJnZXQuc2V0fX0-XG4gICAgICB7eyNpZiB0YXJnZXQuY3VycmVudH19XG4gICAgICAgIHt7I2luLWVsZW1lbnQgdGFyZ2V0LmN1cnJlbnR9fVxuICAgICAgICAgIHt7eWllbGR9fVxuICAgICAgICB7ey9pbi1lbGVtZW50fX1cbiAgICAgIHt7L2lmfX1cbiAgICA8L2Rpdj5cbiAge3svbGV0fX1cbjwvdGVtcGxhdGU-O1xuXG5leHBvcnQgZGVmYXVsdCBQb3J0YWw7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFNBQVMsUUFBUSxRQUFRLGlCQUFpQjtBQUMxQyxTQUFTLElBQUksUUFBUSxrQkFBa0I7QUFFdkMsU0FBUyxpQkFBaUIsRUFBRSxLQUFLLE9BQU8sUUFBUSx1QkFBdUI7QUFFdkUsY0FBYyxHQUFHLFFBQVEsaUNBQWlDO0FBRTFELGlCQUFpQjtJQUNmO1FBQ0U7Ozs7S0FJQyxHQUNELFlBQVksc0JBQXNCLFlBQVksTUFBTTs7O0lBRXREO1FBQ0U7O0tBRUMsR0FDRDs7O0FBSUosTUFBTSxTQUFTLFNBQ2IsQ0FBQyxVQUFTLFNBQVMsQ0FBQyxLQUFJLFdBQVUsTUFBTSxFQUFFLGtCQUFrQixjQUFjLE9BQU87SUFDL0UsSUFBSSxTQUFRLGtCQUFrQixVQUFTO0lBRXZDLFFBQU87QUFDVDtBQUdGLE1BQU0sZUFBZSxJQUFNLEtBQUssVUFBVTtBQUUxQyxPQUFPLE1BQU0sUUFBUSxJQUFJLGFBQWEsU0FBVSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlaEQsQ0FBQSxFQUFBO0lBQUE7UUFBQSxPQUFBLEtBQUEsU0FBQSxDQUFBLEVBQVc7SUFBRDtBQUFBLEdBQUU7QUFFWixlQUFlLE9BQU8ifQ"],"names":["anchor","modifier","element1","to1","update1","found1","findNearestTarget","ElementValue","cell","Portal","setComponentTemplate","precompileTemplate","scope","strictMode","templateOnly"],"mappings":";;;;;;;AAwBA,MAAMA,MAAA,GAASC,QAAA,CACb,CAACC,QAAS,EAAS,CAACC,GAAA,EAAIC,OAAA,CAAyD,KAAA;AAC/E,EAAA,IAAIC,MAAA,GAAQC,iBAAA,CAAkBJ,QAAA,EAASC,GAAA,CAAA,CAAA;AAEvCC,EAAAA,OAAA,CAAOC,MAAA,CAAA,CAAA;AACT,CAAA,CAAA,CAAA;AAGF,MAAME,YAAA,GAAeA,MAAMC,IAAA,EAAe,CAAA;MAE7BC,MAAY,GAAAC,oBAAA,CAAaC,kBAAA,CAetC,ygBAAA,EAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAL,YAAA;AAAAP,IAAAA,MAAAA;AAAA,GAAA,CAAA;EAAAa,UAAA,EAAA,IAAA;AAAU,CAAA,CAAA,EAAAC,YAAA,EAAA;;;;"}